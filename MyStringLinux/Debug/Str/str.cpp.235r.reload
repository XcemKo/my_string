
;; Function int lowerCase(int) (_Z9lowerCasei, funcdef_no=1016, decl_uid=20970, cgraph_uid=193, symbol_order=194)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 8
   Insn 35: point = 0
   Insn 34: point = 0
   Insn 30: point = 1
  BB 6
   Insn 37: point = 4
   Insn 20: point = 4
   Insn 19: point = 6
  BB 7
   Insn 25: point = 7
  BB 5
   Insn 16: point = 8
   Insn 15: point = 8
  BB 4
   Insn 13: point = 8
   Insn 12: point = 8
  BB 3
   Insn 9: point = 8
   Insn 8: point = 8
  BB 2
   Insn 6: point = 8
   Insn 5: point = 8
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 25
changing reg in insn 20
changing reg in insn 30
changing reg in insn 30
changing reg in insn 34
changing reg in insn 19
changing reg in insn 20
starting the processing of deferred insns
ending the processing of deferred insns


int lowerCase(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={6d,5u} r1={1d} r2={1d} r6={1d,14u} r7={1d,8u} r16={1e} r17={5d,4u} r20={1d,1u} 
;;    total ref usage 49{16d,32u,1e} in 15{15 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 src+0 S4 A32])
            (const_int 64 [0x40]))) ..\Str\str.cpp:14 7 {*cmpsi_1}
     (nil))
(jump_insn 6 5 7 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 10)
            (pc))) ..\Str\str.cpp:14 509 {*jcc_1}
     (nil)
 -> 10)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 src+0 S4 A32])
            (const_int 90 [0x5a]))) ..\Str\str.cpp:14 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) ..\Str\str.cpp:14 509 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 10 9 11 4 2 "" [1 uses])
(note 11 10 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 src+0 S4 A32])
            (const_int 191 [0xbf]))) ..\Str\str.cpp:14 7 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) ..\Str\str.cpp:14 509 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 src+0 S4 A32])
            (const_int 223 [0xdf]))) ..\Str\str.cpp:14 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) ..\Str\str.cpp:14 509 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 89
(code_label 17 16 18 6 3 "" [1 uses])
(note 18 17 19 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 6 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 src+0 S4 A32])) ..\Str\str.cpp:14 83 {*movsi_internal}
     (nil))
(insn 20 19 37 6 (parallel [
            (set (reg:SI 0 ax [orig:87 D.21490 ] [87])
                (plus:SI (reg:SI 0 ax [89])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:14 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [0 src+0 S4 A32])
            (const_int 32 [0x20]))
        (nil)))
(jump_insn 37 20 38 6 (set (pc)
        (label_ref 28)) ..\Str\str.cpp:14 551 {jump}
     (nil)
 -> 28)
;;  succ:       8 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 38 37 23)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 23 38 24 7 4 "" [2 uses])
(note 24 23 25 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 28 7 (set (reg:SI 0 ax [orig:87 D.21490 ] [87])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 src+0 S4 A32])) ..\Str\str.cpp:14 83 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100,0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 88
(code_label 28 25 29 8 6 "" [1 uses])
(note 29 28 30 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 34 8 (set (reg:SI 0 ax [orig:88 <retval> ] [88])
        (reg:SI 0 ax [orig:87 D.21490 ] [87])) ..\Str\str.cpp:14 83 {*movsi_internal}
     (nil))
(insn 34 30 35 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) ..\Str\str.cpp:15 83 {*movsi_internal}
     (nil))
(insn 35 34 39 8 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:15 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 39 35 0 NOTE_INSN_DELETED)

;; Function bool operator==(const Str&, const Str&) (_ZeqRK3StrS1_, funcdef_no=1017, decl_uid=20893, cgraph_uid=194, symbol_order=195)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =qm {*setcc_qi}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 52: point = 0
   Insn 51: point = 0
   Insn 47: point = 1
  BB 3
   Insn 54: point = 4
   Insn 13: point = 4
  BB 7
   Insn 44: point = 5
   Insn 43: point = 6
   Insn 42: point = 7
   Insn 41: point = 9
  BB 4
   Insn 29: point = 10
   Insn 28: point = 10
   Insn 27: point = 11
   Insn 26: point = 13
   Insn 25: point = 15
   Insn 24: point = 16
   Insn 23: point = 18
   Insn 22: point = 19
   Insn 21: point = 21
   Insn 20: point = 23
   Insn 19: point = 24
   Insn 18: point = 26
  BB 6
   Insn 56: point = 27
   Insn 36: point = 27
  BB 5
   Insn 34: point = 27
   Insn 33: point = 27
   Insn 32: point = 28
   Insn 31: point = 30
  BB 2
   Insn 11: point = 31
   Insn 10: point = 31
   Insn 9: point = 32
   Insn 8: point = 34
   Insn 7: point = 35
   Insn 6: point = 37
   Insn 5: point = 38
 r87: [2..5]
 r88: [31..35]
 r89: [31..32]
 r90: [22..24]
 r91: [22..23]
 r92: [20..21]
 r93: [10..19]
 r94: [14..16]
 r95: [14..15]
 r96: [12..13]
 r97: [10..11]
 r98: [27..28]
 r99: [6..7]
 r100: [0..1]
 r101: [36..37]
 r102: [33..34]
 r103: [25..26]
 r104: [17..18]
 r105: [29..30]
 r106: [8..9]
Compressing live ranges: from 38 to 32 - 84%
Ranges after the compression:
 r87: [2..3]
 r88: [26..29]
 r89: [26..27]
 r90: [18..19]
 r91: [18..19]
 r92: [16..17]
 r93: [8..15]
 r94: [12..13]
 r95: [12..13]
 r96: [10..11]
 r97: [8..9]
 r98: [22..23]
 r99: [4..5]
 r100: [0..1]
 r101: [30..31]
 r102: [28..29]
 r103: [20..21]
 r104: [14..15]
 r105: [24..25]
 r106: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 44
changing reg in insn 13
changing reg in insn 47
changing reg in insn 7
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 28
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 51
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 31
changing reg in insn 32
changing reg in insn 41
changing reg in insn 42
starting the processing of deferred insns
ending the processing of deferred insns


bool operator==(const Str&, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 17[flags]
;;  ref usage 	r0={19d,18u} r1={4d,3u} r2={2d,1u} r6={1d,21u} r7={1d,8u} r17={7d,4u} r20={1d,1u} 
;;    total ref usage 91{35d,56u,0e} in 34{34 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 101 102
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:19 83 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:20 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:88 D.21492 ] [88])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 4 [0x4])) [0 left_5(D)->size+0 S4 A32])) ..\Str\str.cpp:20 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:20 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:89 D.21492 ] [89])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [102])
                (const_int 4 [0x4])) [0 right_7(D)->size+0 S4 A32])) ..\Str\str.cpp:20 83 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:88 D.21492 ] [88])
            (reg:SI 0 ax [orig:89 D.21492 ] [89]))) ..\Str\str.cpp:20 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) ..\Str\str.cpp:20 509 {*jcc_1}
     (nil)
 -> 16)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 54 3 (set (reg:QI 0 ax [orig:87 D.21491 ] [87])
        (const_int 0 [0])) ..\Str\str.cpp:21 86 {*movqi_internal}
     (nil))
(jump_insn 54 13 55 3 (set (pc)
        (label_ref 45)) ..\Str\str.cpp:21 551 {jump}
     (nil)
 -> 45)
;;  succ:       8 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 55 54 16)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              6 [100,0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 103 104
(code_label 16 55 17 4 8 "" [2 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg/f:SI 1 dx [orig:90 D.21493 ] [90])
        (mem/f/j:SI (reg/f:SI 0 ax [103]) [0 left_5(D)->source+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:SI 0 ax [orig:91 D.21494 ] [91])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:SI 0 ax [orig:92 D.21493 ] [92])
                (plus:SI (reg:SI 0 ax [orig:91 D.21494 ] [91])
                    (reg/f:SI 1 dx [orig:90 D.21493 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:22 194 {*addsi_1}
     (nil))
(insn 22 21 23 4 (set (reg:QI 1 dx [orig:93 D.21495 ] [93])
        (mem:QI (reg/f:SI 0 ax [orig:92 D.21493 ] [92]) [0 *_12+0 S1 A8])) ..\Str\str.cpp:22 86 {*movqi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg/f:SI 2 cx [orig:94 D.21493 ] [94])
        (mem/f/j:SI (reg/f:SI 0 ax [104]) [0 right_7(D)->source+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [orig:95 D.21494 ] [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg/f:SI 0 ax [orig:96 D.21493 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 D.21494 ] [95])
                    (reg/f:SI 2 cx [orig:94 D.21493 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:22 194 {*addsi_1}
     (nil))
(insn 27 26 28 4 (set (reg:QI 0 ax [orig:97 D.21495 ] [97])
        (mem:QI (reg/f:SI 0 ax [orig:96 D.21493 ] [96]) [0 *_16+0 S1 A8])) ..\Str\str.cpp:22 86 {*movqi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:93 D.21495 ] [93])
            (reg:QI 0 ax [orig:97 D.21495 ] [97]))) ..\Str\str.cpp:22 5 {*cmpqi_1}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) ..\Str\str.cpp:22 509 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       7
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 105
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg/f:SI 0 ax [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:SI 0 ax [orig:98 D.21492 ] [98])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 4 [0x4])) [0 left_5(D)->size+0 S4 A32])) ..\Str\str.cpp:22 83 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:98 D.21492 ] [98])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) ..\Str\str.cpp:22 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) ..\Str\str.cpp:22 509 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 56 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:22 194 {*addsi_1}
     (nil))
(jump_insn 56 36 57 6 (set (pc)
        (label_ref 16)) ..\Str\str.cpp:22 551 {jump}
     (nil)
 -> 16)
;;  succ:       4 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 57 56 39)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 99 106
(code_label 39 57 40 7 10 "" [2 uses])
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:23 83 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:SI 0 ax [orig:99 D.21492 ] [99])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [106])
                (const_int 4 [0x4])) [0 left_5(D)->size+0 S4 A32])) ..\Str\str.cpp:23 83 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:99 D.21492 ] [99])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) ..\Str\str.cpp:23 7 {*cmpsi_1}
     (nil))
(insn 44 43 45 7 (set (reg:QI 0 ax [orig:87 D.21491 ] [87])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ..\Str\str.cpp:23 504 {*setcc_qi}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100,0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 100
(code_label 45 44 46 8 9 "" [1 uses])
(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 51 8 (set (reg:QI 0 ax [orig:100 <retval> ] [100])
        (reg:QI 0 ax [orig:87 D.21491 ] [87])) 86 {*movqi_internal}
     (nil))
(insn 51 47 52 8 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:100 <retval> ] [100])) ..\Str\str.cpp:24 86 {*movqi_internal}
     (nil))
(insn 52 51 58 8 (use (reg/i:QI 0 ax)) ..\Str\str.cpp:24 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 58 52 0 NOTE_INSN_DELETED)

;; Function bool operator!=(const Str&, const Str&) (_ZneRK3StrS1_, funcdef_no=1018, decl_uid=20914, cgraph_uid=195, symbol_order=196)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=8, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 11:  (0) =q  (1) %0  (2) qmn {*xorqi_1}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 14: point = 1
   Insn 11: point = 3
   Insn 10: point = 5
   Insn 9: point = 6
   Insn 8: point = 6
   Insn 7: point = 7
   Insn 6: point = 8
   Insn 5: point = 9
Compressing live ranges: from 10 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=8, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 14
changing reg in insn 14
changing reg in insn 18
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns


bool operator!=(const Str&, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={8d,8u} r1={2d} r2={2d} r6={1d,4u} r7={1d,7u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{87d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:27 83 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [90])) ..\Str\str.cpp:27 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:27 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [91])) ..\Str\str.cpp:27 83 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZeqRK3StrS1_") [flags 0x3]  <function_decl 04e59480 operator==>) [0 operator== S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:27 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 10 9 11 2 (set (reg:QI 0 ax [orig:87 D.21496 ] [87])
        (reg:QI 0 ax)) ..\Str\str.cpp:27 86 {*movqi_internal}
     (nil))
(insn 11 10 14 2 (parallel [
            (set (reg:QI 0 ax [orig:88 D.21496 ] [88])
                (xor:QI (reg:QI 0 ax [orig:87 D.21496 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:27 344 {*xorqi_1}
     (nil))
(insn 14 11 18 2 (set (reg:QI 0 ax [orig:89 <retval> ] [89])
        (reg:QI 0 ax [orig:88 D.21496 ] [88])) ..\Str\str.cpp:27 86 {*movqi_internal}
     (nil))
(insn 18 14 19 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:89 <retval> ] [89])) ..\Str\str.cpp:28 86 {*movqi_internal}
     (nil))
(insn 19 18 21 2 (use (reg/i:QI 0 ax)) ..\Str\str.cpp:28 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 21 19 0 NOTE_INSN_DELETED)

;; Function const char& Str::operator[](int) const (_ZNK3StrixEi, funcdef_no=1019, decl_uid=20928, cgraph_uid=196, symbol_order=197)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) q  (1) qm {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 27:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 36: point = 0
   Insn 35: point = 0
   Insn 31: point = 1
   Insn 28: point = 3
   Insn 27: point = 4
  BB 4
   Insn 38: point = 6
   Insn 19: point = 6
   Insn 18: point = 8
   Insn 17: point = 10
   Insn 16: point = 12
   Insn 15: point = 13
   Insn 14: point = 15
  BB 5
   Insn 24: point = 16
  BB 3
   Insn 12: point = 17
   Insn 11: point = 17
   Insn 10: point = 18
   Insn 9: point = 20
  BB 2
   Insn 7: point = 21
   Insn 6: point = 21
   Insn 2: point = 21
 r87: [16..16] [4..6]
 r88: [17..18]
 r89: [11..13]
 r90: [11..12]
 r91: [9..10]
 r92: [7..8]
 r93: [2..3]
 r94: [0..1]
 r95: [19..20]
 r96: [14..15]
Compressing live ranges: from 21 to 19 - 90%
Ranges after the compression:
 r87: [14..14] [4..5]
 r88: [15..16]
 r89: [10..11]
 r90: [10..11]
 r91: [8..9]
 r92: [6..7]
 r93: [2..3]
 r94: [0..1]
 r95: [17..18]
 r96: [12..13]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 24
changing reg in insn 19
changing reg in insn 27
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 28
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
starting the processing of deferred insns
ending the processing of deferred insns


const char& Str::operator[](int) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 17[flags]
;;  ref usage 	r0={12d,11u} r1={2d,1u} r2={1d,1u} r6={1d,13u} r7={1d,6u} r17={3d,2u} r20={1d,1u} 
;;    total ref usage 56{21d,35u,0e} in 20{20 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:31 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ..\Str\str.cpp:32 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) ..\Str\str.cpp:32 509 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 95
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 this+0 S4 A32])) ..\Str\str.cpp:32 83 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:SI 0 ax [orig:88 D.21498 ] [88])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [95])
                (const_int 4 [0x4])) [0 this_4(D)->size+0 S4 A32])) ..\Str\str.cpp:32 83 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.21498 ] [88])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 i+0 S4 A32]))) ..\Str\str.cpp:32 7 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) ..\Str\str.cpp:32 509 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 89 90 91 92 96
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 this+0 S4 A32])) ..\Str\str.cpp:32 83 {*movsi_internal}
     (nil))
(insn 15 14 16 4 (set (reg/f:SI 1 dx [orig:89 D.21499 ] [89])
        (mem/f/j:SI (reg/f:SI 0 ax [96]) [0 this_4(D)->source+0 S4 A32])) ..\Str\str.cpp:32 83 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:SI 0 ax [orig:90 D.21500 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 i+0 S4 A32])) ..\Str\str.cpp:32 83 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (parallel [
            (set (reg/f:SI 0 ax [orig:91 D.21499 ] [91])
                (plus:SI (reg:SI 0 ax [orig:90 D.21500 ] [90])
                    (reg/f:SI 1 dx [orig:89 D.21499 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:32 194 {*addsi_1}
     (nil))
(insn 18 17 19 4 (set (reg:QI 0 ax [orig:92 D.21501 ] [92])
        (mem:QI (reg/f:SI 0 ax [orig:91 D.21499 ] [91]) [0 *_8+0 S1 A8])) ..\Str\str.cpp:32 86 {*movqi_internal}
     (nil))
(insn 19 18 38 4 (set (reg:QI 0 ax [orig:87 D.21497 ] [87])
        (reg:QI 0 ax [orig:92 D.21501 ] [92])) ..\Str\str.cpp:32 86 {*movqi_internal}
     (nil))
(jump_insn 38 19 39 4 (set (pc)
        (label_ref 25)) ..\Str\str.cpp:32 551 {jump}
     (nil)
 -> 25)
;;  succ:       6 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 39 38 22)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 22 39 23 5 14 "" [2 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:QI 0 ax [orig:87 D.21497 ] [87])
        (const_int 0 [0])) ..\Str\str.cpp:32 86 {*movqi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100,0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 93 94
(code_label 25 24 26 6 15 "" [1 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 D.20987+0 S1 A8])
        (reg:QI 0 ax [orig:87 D.21497 ] [87])) ..\Str\str.cpp:32 86 {*movqi_internal}
     (nil))
(insn 28 27 31 6 (set (reg/f:SI 0 ax [orig:93 D.21502 ] [93])
        (const_int 0 [0])) ..\Str\str.cpp:32 83 {*movsi_internal}
     (nil))
(insn 31 28 35 6 (set (reg:SI 0 ax [orig:94 <retval> ] [94])
        (reg/f:SI 0 ax [orig:93 D.21502 ] [93])) ..\Str\str.cpp:32 83 {*movsi_internal}
     (nil))
(insn 35 31 36 6 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:94 <retval> ] [94])) ..\Str\str.cpp:33 83 {*movsi_internal}
     (nil))
(insn 36 35 40 6 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:33 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 40 36 0 NOTE_INSN_DELETED)

;; Function unsigned char& Str::operator[](int) (_ZN3StrixEi, funcdef_no=1020, decl_uid=20931, cgraph_uid=197, symbol_order=198)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 33: point = 0
   Insn 32: point = 0
   Insn 28: point = 1
   Insn 25: point = 3
  BB 4
   Insn 35: point = 6
   Insn 17: point = 6
   Insn 16: point = 8
   Insn 15: point = 9
   Insn 14: point = 11
  BB 5
   Insn 22: point = 12
  BB 3
   Insn 12: point = 13
   Insn 11: point = 13
   Insn 10: point = 14
   Insn 9: point = 16
  BB 2
   Insn 7: point = 17
   Insn 6: point = 17
   Insn 2: point = 17
 r87: [12..12] [4..6]
 r88: [13..14]
 r89: [7..9]
 r90: [7..8]
 r91: [2..3]
 r92: [0..1]
 r93: [15..16]
 r94: [10..11]
Compressing live ranges: from 17 to 15 - 88%
Ranges after the compression:
 r87: [10..10] [4..5]
 r88: [11..12]
 r89: [6..7]
 r90: [6..7]
 r91: [2..3]
 r92: [0..1]
 r93: [13..14]
 r94: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 22
changing reg in insn 17
changing reg in insn 25
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 25
changing reg in insn 28
changing reg in insn 28
changing reg in insn 32
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
starting the processing of deferred insns
ending the processing of deferred insns


unsigned char& Str::operator[](int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 17[flags]
;;  ref usage 	r0={10d,9u} r1={2d,1u} r2={1d,1u} r6={1d,12u} r7={1d,6u} r17={3d,2u} r20={1d,1u} 
;;    total ref usage 51{19d,32u,0e} in 17{17 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:36 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ..\Str\str.cpp:38 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) ..\Str\str.cpp:38 509 {*jcc_1}
     (nil)
 -> 20)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 93
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:SI 0 ax [orig:88 D.21504 ] [88])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 4 [0x4])) [0 this_4(D)->size+0 S4 A32])) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.21504 ] [88])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 i+0 S4 A32]))) ..\Str\str.cpp:38 7 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) ..\Str\str.cpp:38 509 {*jcc_1}
     (nil)
 -> 20)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 89 90 94
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
(insn 15 14 16 4 (set (reg/f:SI 1 dx [orig:89 D.21503 ] [89])
        (mem/f/j:SI (reg/f:SI 0 ax [94]) [0 this_4(D)->source+0 S4 A32])) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:SI 0 ax [orig:90 D.21505 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 i+0 S4 A32])) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
(insn 17 16 35 4 (parallel [
            (set (reg/f:SI 0 ax [orig:87 D.21503 ] [87])
                (plus:SI (reg:SI 0 ax [orig:90 D.21505 ] [90])
                    (reg/f:SI 1 dx [orig:89 D.21503 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:38 194 {*addsi_1}
     (nil))
(jump_insn 35 17 36 4 (set (pc)
        (label_ref 23)) ..\Str\str.cpp:38 551 {jump}
     (nil)
 -> 23)
;;  succ:       6 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 36 35 20)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 20 36 21 5 18 "" [2 uses])
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg/f:SI 0 ax [orig:87 D.21503 ] [87])
        (symbol_ref:SI ("_ZZN3StrixEiE5DUMMY") [flags 0x2]  <var_decl 04e13b00 DUMMY>)) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100,0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 91 92
(code_label 23 22 24 6 19 "" [1 uses])
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 28 6 (set (reg/f:SI 0 ax [orig:91 D.21506 ] [91])
        (reg/f:SI 0 ax [orig:87 D.21503 ] [87])) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
(insn 28 25 32 6 (set (reg:SI 0 ax [orig:92 <retval> ] [92])
        (reg/f:SI 0 ax [orig:91 D.21506 ] [91])) ..\Str\str.cpp:38 83 {*movsi_internal}
     (nil))
(insn 32 28 33 6 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:92 <retval> ] [92])) ..\Str\str.cpp:39 83 {*movsi_internal}
     (nil))
(insn 33 32 37 6 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:39 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 37 33 0 NOTE_INSN_DELETED)

;; Function bool operator>(const Str&, const Str&) (_ZgtRK3StrS1_, funcdef_no=1021, decl_uid=20917, cgraph_uid=198, symbol_order=199)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 5:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 49:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 59:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) q  (1) qm {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) q  (1) qm {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 64:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) q  (1) qm {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) q  (1) qm {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 73:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 78:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 94: point = 0
   Insn 93: point = 0
   Insn 89: point = 1
   Insn 86: point = 3
  BB 11
   Insn 100: point = 4
   Insn 73: point = 4
  BB 9
   Insn 98: point = 4
   Insn 64: point = 4
  BB 8
   Insn 62: point = 4
   Insn 61: point = 4
   Insn 60: point = 5
   Insn 59: point = 6
   Insn 58: point = 7
   Insn 57: point = 8
   Insn 56: point = 8
   Insn 55: point = 9
   Insn 54: point = 11
   Insn 53: point = 13
   Insn 52: point = 15
   Insn 51: point = 16
   Insn 50: point = 18
   Insn 49: point = 19
   Insn 48: point = 20
   Insn 47: point = 21
   Insn 46: point = 21
   Insn 45: point = 22
   Insn 44: point = 24
   Insn 43: point = 26
   Insn 42: point = 28
   Insn 41: point = 29
   Insn 40: point = 31
  BB 7
   Insn 38: point = 32
   Insn 37: point = 32
   Insn 36: point = 33
   Insn 35: point = 35
  BB 12
   Insn 102: point = 36
   Insn 78: point = 36
  BB 10
   Insn 71: point = 36
   Insn 70: point = 36
   Insn 69: point = 37
  BB 6
   Insn 33: point = 38
   Insn 32: point = 38
  BB 4
   Insn 96: point = 40
   Insn 23: point = 40
   Insn 22: point = 42
  BB 5
   Insn 29: point = 43
   Insn 28: point = 45
  BB 3
   Insn 20: point = 46
   Insn 19: point = 46
   Insn 18: point = 47
   Insn 17: point = 49
   Insn 16: point = 50
   Insn 15: point = 52
  BB 2
   Insn 13: point = 53
   Insn 12: point = 53
   Insn 11: point = 54
   Insn 10: point = 55
   Insn 9: point = 55
   Insn 8: point = 56
   Insn 7: point = 57
   Insn 6: point = 58
   Insn 5: point = 59
 r87: [43..43] [38..40]
 r88: [53..54]
 r89: [46..50]
 r90: [46..47]
 r91: [32..33]
 r92: [27..29]
 r93: [27..28]
 r94: [25..26]
 r95: [23..24]
 r96: [21..22]
 r97: [19..20]
 r98: [14..16]
 r99: [14..15]
 r100: [12..13]
 r101: [10..11]
 r102: [8..9]
 r103: [6..7]
 r104: [2..3]
 r105: [0..1]
 r106: [57..58]
 r107: [55..56]
 r108: [51..52]
 r109: [48..49]
 r110: [41..42]
 r111: [44..45]
 r112: [34..35]
 r113: [30..31]
 r114: [17..18]
 r115: [4..5]
 r116: [36..37]
Compressing live ranges: from 59 to 55 - 93%
Ranges after the compression:
 r87: [40..40] [36..37]
 r88: [49..50]
 r89: [43..46]
 r90: [43..44]
 r91: [30..31]
 r92: [26..27]
 r93: [26..27]
 r94: [24..25]
 r95: [22..23]
 r96: [20..21]
 r97: [18..19]
 r98: [14..15]
 r99: [14..15]
 r100: [12..13]
 r101: [10..11]
 r102: [8..9]
 r103: [6..7]
 r104: [2..3]
 r105: [0..1]
 r106: [53..54]
 r107: [51..52]
 r108: [47..48]
 r109: [45..46]
 r110: [38..39]
 r111: [41..42]
 r112: [32..33]
 r113: [28..29]
 r114: [16..17]
 r115: [4..5]
 r116: [34..35]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 23
changing reg in insn 32
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 86
changing reg in insn 89
changing reg in insn 89
changing reg in insn 93
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 50
changing reg in insn 51
changing reg in insn 60
changing reg in insn 61
changing reg in insn 69
changing reg in insn 70
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 57.


bool operator>(const Str&, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={33d,32u} r1={7d,3u} r2={4d} r6={1d,39u} r7={1d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={12d,5u} r18={3d} r19={3d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 374{269d,104u,1e} in 62{59 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 106 107
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:42 86 {*movqi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:44 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [106])) ..\Str\str.cpp:44 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:44 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [107])) ..\Str\str.cpp:44 83 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZneRK3StrS1_") [flags 0x3]  <function_decl 04e59800 operator!=>) [0 operator!= S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:44 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 11 10 12 2 (set (reg:QI 0 ax [orig:88 D.21508 ] [88])
        (reg:QI 0 ax)) ..\Str\str.cpp:44 86 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.21508 ] [88])
            (const_int 0 [0]))) ..\Str\str.cpp:44 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) ..\Str\str.cpp:44 509 {*jcc_1}
     (nil)
 -> 84)
;;  succ:       3 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 108 109
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:SI 1 dx [orig:89 D.21509 ] [89])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [108])
                (const_int 4 [0x4])) [0 left_10(D)->size+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 ax [orig:90 D.21509 ] [90])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 4 [0x4])) [0 right_11(D)->size+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:89 D.21509 ] [89])
            (reg:SI 0 ax [orig:90 D.21509 ] [90]))) ..\Str\str.cpp:45 7 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) ..\Str\str.cpp:45 509 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 110
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(insn 23 22 96 4 (set (reg:SI 0 ax [orig:87 D.21507 ] [87])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [110])
                (const_int 4 [0x4])) [0 right_11(D)->size+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(jump_insn 96 23 97 4 (set (pc)
        (label_ref 30)) 551 {jump}
     (nil)
 -> 30)
;;  succ:       6 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 97 96 26)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 111
(code_label 26 97 27 5 23 "" [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 ax [orig:87 D.21507 ] [87])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 4 [0x4])) [0 left_10(D)->size+0 S4 A32])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100,0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	
(code_label 30 29 31 6 24 "" [1 uses])
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 min_size+0 S4 A32])
        (reg:SI 0 ax [orig:87 D.21507 ] [87])) ..\Str\str.cpp:45 83 {*movsi_internal}
     (nil))
(insn 33 32 79 6 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:46 83 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              12 [100,0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 112
(code_label 79 33 34 7 28 "" [1 uses])
(note 34 79 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 min_size+0 S4 A32])) ..\Str\str.cpp:46 83 {*movsi_internal}
     (nil))
(insn 36 35 37 7 (parallel [
            (set (reg:SI 0 ax [orig:91 D.21509 ] [91])
                (plus:SI (reg:SI 0 ax [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:46 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 min_size+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 37 36 38 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:91 D.21509 ] [91])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) ..\Str\str.cpp:46 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 39 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 84)
            (pc))) ..\Str\str.cpp:46 509 {*jcc_1}
     (nil)
 -> 84)
;;  succ:       13
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 95 96 97 98 99 100 101 102 103 113 114 115
(note 39 38 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:47 83 {*movsi_internal}
     (nil))
(insn 41 40 42 8 (set (reg/f:SI 1 dx [orig:92 D.21510 ] [92])
        (mem/f/j:SI (reg/f:SI 0 ax [113]) [0 left_10(D)->source+0 S4 A32])) ..\Str\str.cpp:47 83 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:SI 0 ax [orig:93 D.21511 ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ..\Str\str.cpp:47 83 {*movsi_internal}
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg/f:SI 0 ax [orig:94 D.21510 ] [94])
                (plus:SI (reg:SI 0 ax [orig:93 D.21511 ] [93])
                    (reg/f:SI 1 dx [orig:92 D.21510 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:47 194 {*addsi_1}
     (nil))
(insn 44 43 45 8 (set (reg:QI 0 ax [orig:95 D.21512 ] [95])
        (mem:QI (reg/f:SI 0 ax [orig:94 D.21510 ] [94]) [0 *_23+0 S1 A8])) ..\Str\str.cpp:47 86 {*movqi_internal}
     (nil))
(insn 45 44 46 8 (set (reg:SI 0 ax [orig:96 D.21509 ] [96])
        (zero_extend:SI (reg:QI 0 ax [orig:95 D.21512 ] [95]))) ..\Str\str.cpp:47 125 {*zero_extendqisi2}
     (nil))
(insn 46 45 47 8 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:96 D.21509 ] [96])) ..\Str\str.cpp:47 83 {*movsi_internal}
     (nil))
(call_insn 47 46 48 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z9lowerCasei") [flags 0x3]  <function_decl 04e5f200 lowerCase>) [0 lowerCase S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:47 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 48 47 49 8 (set (reg:SI 0 ax [orig:97 D.21509 ] [97])
        (reg:SI 0 ax)) ..\Str\str.cpp:47 83 {*movsi_internal}
     (nil))
(insn 49 48 50 8 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 tmp_l+0 S1 A8])
        (reg:QI 0 ax [orig:97 D.21509 ] [97])) ..\Str\str.cpp:47 86 {*movqi_internal}
     (nil))
(insn 50 49 51 8 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:48 83 {*movsi_internal}
     (nil))
(insn 51 50 52 8 (set (reg/f:SI 1 dx [orig:98 D.21510 ] [98])
        (mem/f/j:SI (reg/f:SI 0 ax [114]) [0 right_11(D)->source+0 S4 A32])) ..\Str\str.cpp:48 83 {*movsi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:SI 0 ax [orig:99 D.21511 ] [99])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ..\Str\str.cpp:48 83 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg/f:SI 0 ax [orig:100 D.21510 ] [100])
                (plus:SI (reg:SI 0 ax [orig:99 D.21511 ] [99])
                    (reg/f:SI 1 dx [orig:98 D.21510 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:48 194 {*addsi_1}
     (nil))
(insn 54 53 55 8 (set (reg:QI 0 ax [orig:101 D.21512 ] [101])
        (mem:QI (reg/f:SI 0 ax [orig:100 D.21510 ] [100]) [0 *_31+0 S1 A8])) ..\Str\str.cpp:48 86 {*movqi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:SI 0 ax [orig:102 D.21509 ] [102])
        (zero_extend:SI (reg:QI 0 ax [orig:101 D.21512 ] [101]))) ..\Str\str.cpp:48 125 {*zero_extendqisi2}
     (nil))
(insn 56 55 57 8 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:102 D.21509 ] [102])) ..\Str\str.cpp:48 83 {*movsi_internal}
     (nil))
(call_insn 57 56 58 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z9lowerCasei") [flags 0x3]  <function_decl 04e5f200 lowerCase>) [0 lowerCase S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:48 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 58 57 59 8 (set (reg:SI 0 ax [orig:103 D.21509 ] [103])
        (reg:SI 0 ax)) ..\Str\str.cpp:48 83 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 tmp_r+0 S1 A8])
        (reg:QI 0 ax [orig:103 D.21509 ] [103])) ..\Str\str.cpp:48 86 {*movqi_internal}
     (nil))
(insn 60 59 61 8 (set (reg:QI 0 ax [115])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 tmp_l+0 S1 A8])) ..\Str\str.cpp:49 86 {*movqi_internal}
     (nil))
(insn 61 60 62 8 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [115])
            (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -14 [0xfffffffffffffff2])) [0 tmp_r+0 S1 A8]))) ..\Str\str.cpp:49 5 {*cmpqi_1}
     (nil))
(jump_insn 62 61 63 8 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) ..\Str\str.cpp:49 509 {*jcc_1}
     (nil)
 -> 67)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 98 9 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (const_int 1 [0x1])) ..\Str\str.cpp:51 86 {*movqi_internal}
     (nil))
(jump_insn 98 64 99 9 (set (pc)
        (label_ref 84)) ..\Str\str.cpp:52 551 {jump}
     (nil)
 -> 84)
;;  succ:       13 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 99 98 67)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116
(code_label 67 99 68 10 26 "" [1 uses])
(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 10 (set (reg:QI 0 ax [116])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 tmp_l+0 S1 A8])) ..\Str\str.cpp:53 86 {*movqi_internal}
     (nil))
(insn 70 69 71 10 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [116])
            (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -14 [0xfffffffffffffff2])) [0 tmp_r+0 S1 A8]))) ..\Str\str.cpp:53 5 {*cmpqi_1}
     (nil))
(jump_insn 71 70 72 10 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) ..\Str\str.cpp:53 509 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 100 11 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:54 86 {*movqi_internal}
     (nil))
(jump_insn 100 73 101 11 (set (pc)
        (label_ref 84)) ..\Str\str.cpp:55 551 {jump}
     (nil)
 -> 84)
;;  succ:       13 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 101 100 76)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 76 101 77 12 27 "" [1 uses])
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 102 12 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:46 194 {*addsi_1}
     (nil))
(jump_insn 102 78 103 12 (set (pc)
        (label_ref 79)) ..\Str\str.cpp:46 551 {jump}
     (nil)
 -> 79)
;;  succ:       7 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 103 102 84)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              9 [100,0%] 
;;              7
;;              11 [100,0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 104 105
(code_label 84 103 85 13 22 "" [4 uses])
(note 85 84 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 89 13 (set (reg:QI 0 ax [orig:104 D.21508 ] [104])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])) ..\Str\str.cpp:59 86 {*movqi_internal}
     (nil))
(insn 89 86 93 13 (set (reg:QI 0 ax [orig:105 <retval> ] [105])
        (reg:QI 0 ax [orig:104 D.21508 ] [104])) ..\Str\str.cpp:59 86 {*movqi_internal}
     (nil))
(insn 93 89 94 13 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:105 <retval> ] [105])) ..\Str\str.cpp:60 86 {*movqi_internal}
     (nil))
(insn 94 93 104 13 (use (reg/i:QI 0 ax)) ..\Str\str.cpp:60 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 104 94 0 NOTE_INSN_DELETED)

;; Function bool operator<(const Str&, const Str&) (_ZltRK3StrS1_, funcdef_no=1022, decl_uid=20923, cgraph_uid=199, symbol_order=200)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 5:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 21:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) q  (1) qm {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 33: point = 0
   Insn 32: point = 0
   Insn 28: point = 1
   Insn 25: point = 3
  BB 3
   Insn 22: point = 4
   Insn 21: point = 5
   Insn 20: point = 7
   Insn 19: point = 8
   Insn 18: point = 8
   Insn 17: point = 9
   Insn 16: point = 10
   Insn 15: point = 11
  BB 2
   Insn 13: point = 12
   Insn 12: point = 12
   Insn 11: point = 13
   Insn 10: point = 14
   Insn 9: point = 14
   Insn 8: point = 15
   Insn 7: point = 16
   Insn 6: point = 17
   Insn 5: point = 18
Compressing live ranges: from 18 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 28
changing reg in insn 28
changing reg in insn 32
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
starting the processing of deferred insns
ending the processing of deferred insns


bool operator<(const Str&, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={13d,13u} r1={3d} r2={3d} r6={1d,11u} r7={1d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,1u} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 206{166d,40u,0e} in 21{19 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 91 92
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:63 86 {*movqi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:64 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [91])) ..\Str\str.cpp:64 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:64 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [92])) ..\Str\str.cpp:64 83 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZneRK3StrS1_") [flags 0x3]  <function_decl 04e59800 operator!=>) [0 operator!= S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:64 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 11 10 12 2 (set (reg:QI 0 ax [orig:87 D.21513 ] [87])
        (reg:QI 0 ax)) ..\Str\str.cpp:64 86 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 D.21513 ] [87])
            (const_int 0 [0]))) ..\Str\str.cpp:64 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) ..\Str\str.cpp:64 509 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 93 94 95
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:65 83 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [93])) ..\Str\str.cpp:65 83 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:65 83 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [94])) ..\Str\str.cpp:65 83 {*movsi_internal}
     (nil))
(call_insn 19 18 20 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZgtRK3StrS1_") [flags 0x3]  <function_decl 04e59880 operator>>) [0 operator> S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:65 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 20 19 21 3 (set (reg:QI 0 ax [orig:88 D.21513 ] [88])
        (reg:QI 0 ax)) ..\Str\str.cpp:65 86 {*movqi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:QI 0 ax [95])
                (xor:QI (reg:QI 0 ax [orig:88 D.21513 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:65 344 {*xorqi_1}
     (nil))
(insn 22 21 23 3 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (reg:QI 0 ax [95])) ..\Str\str.cpp:65 86 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 89 90
(code_label 23 22 24 4 31 "" [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 28 4 (set (reg:QI 0 ax [orig:89 D.21513 ] [89])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])) ..\Str\str.cpp:66 86 {*movqi_internal}
     (nil))
(insn 28 25 32 4 (set (reg:QI 0 ax [orig:90 <retval> ] [90])
        (reg:QI 0 ax [orig:89 D.21513 ] [89])) ..\Str\str.cpp:66 86 {*movqi_internal}
     (nil))
(insn 32 28 33 4 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) ..\Str\str.cpp:67 86 {*movqi_internal}
     (nil))
(insn 33 32 35 4 (use (reg/i:QI 0 ax)) ..\Str\str.cpp:67 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 33 0 NOTE_INSN_DELETED)

;; Function bool operator>=(const Str&, const Str&) (_ZgeRK3StrS1_, funcdef_no=1023, decl_uid=20920, cgraph_uid=200, symbol_order=201)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 5:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) q  (1) qm {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 32: point = 0
   Insn 31: point = 0
   Insn 27: point = 1
   Insn 24: point = 3
  BB 3
   Insn 21: point = 4
   Insn 20: point = 5
   Insn 19: point = 6
   Insn 18: point = 6
   Insn 17: point = 7
   Insn 16: point = 8
   Insn 15: point = 9
  BB 2
   Insn 13: point = 10
   Insn 12: point = 10
   Insn 11: point = 11
   Insn 10: point = 12
   Insn 9: point = 12
   Insn 8: point = 13
   Insn 7: point = 14
   Insn 6: point = 15
   Insn 5: point = 16
Compressing live ranges: from 16 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 31
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
starting the processing of deferred insns
ending the processing of deferred insns


bool operator>=(const Str&, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,12u} r1={3d} r2={3d} r6={1d,11u} r7={1d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d,1u} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 203{164d,39u,0e} in 20{18 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 90 91
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (const_int 1 [0x1])) ..\Str\str.cpp:70 86 {*movqi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:71 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [90])) ..\Str\str.cpp:71 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:71 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [91])) ..\Str\str.cpp:71 83 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZneRK3StrS1_") [flags 0x3]  <function_decl 04e59800 operator!=>) [0 operator!= S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:71 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 11 10 12 2 (set (reg:QI 0 ax [orig:87 D.21514 ] [87])
        (reg:QI 0 ax)) ..\Str\str.cpp:71 86 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 D.21514 ] [87])
            (const_int 0 [0]))) ..\Str\str.cpp:71 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) ..\Str\str.cpp:71 509 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:72 83 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [92])) ..\Str\str.cpp:72 83 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:72 83 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [93])) ..\Str\str.cpp:72 83 {*movsi_internal}
     (nil))
(call_insn 19 18 20 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZgtRK3StrS1_") [flags 0x3]  <function_decl 04e59880 operator>>) [0 operator> S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:72 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 20 19 21 3 (set (reg:QI 0 ax [94])
        (reg:QI 0 ax)) ..\Str\str.cpp:72 86 {*movqi_internal}
     (nil))
(insn 21 20 22 3 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (reg:QI 0 ax [94])) ..\Str\str.cpp:72 86 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 88 89
(code_label 22 21 23 4 34 "" [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 27 4 (set (reg:QI 0 ax [orig:88 D.21514 ] [88])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])) ..\Str\str.cpp:73 86 {*movqi_internal}
     (nil))
(insn 27 24 31 4 (set (reg:QI 0 ax [orig:89 <retval> ] [89])
        (reg:QI 0 ax [orig:88 D.21514 ] [88])) ..\Str\str.cpp:73 86 {*movqi_internal}
     (nil))
(insn 31 27 32 4 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:89 <retval> ] [89])) ..\Str\str.cpp:74 86 {*movqi_internal}
     (nil))
(insn 32 31 34 4 (use (reg/i:QI 0 ax)) ..\Str\str.cpp:74 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 34 32 0 NOTE_INSN_DELETED)

;; Function bool operator<=(const Str&, const Str&) (_ZleRK3StrS1_, funcdef_no=1024, decl_uid=20926, cgraph_uid=201, symbol_order=202)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 5:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) q  (1) qm {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 32: point = 0
   Insn 31: point = 0
   Insn 27: point = 1
   Insn 24: point = 3
  BB 3
   Insn 21: point = 4
   Insn 20: point = 5
   Insn 19: point = 6
   Insn 18: point = 6
   Insn 17: point = 7
   Insn 16: point = 8
   Insn 15: point = 9
  BB 2
   Insn 13: point = 10
   Insn 12: point = 10
   Insn 11: point = 11
   Insn 10: point = 12
   Insn 9: point = 12
   Insn 8: point = 13
   Insn 7: point = 14
   Insn 6: point = 15
   Insn 5: point = 16
Compressing live ranges: from 16 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 31
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
starting the processing of deferred insns
ending the processing of deferred insns


bool operator<=(const Str&, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,12u} r1={3d} r2={3d} r6={1d,11u} r7={1d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d,1u} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 203{164d,39u,0e} in 20{18 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 90 91
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (const_int 1 [0x1])) ..\Str\str.cpp:77 86 {*movqi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:78 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [90])) ..\Str\str.cpp:78 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:78 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [91])) ..\Str\str.cpp:78 83 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZneRK3StrS1_") [flags 0x3]  <function_decl 04e59800 operator!=>) [0 operator!= S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:78 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 11 10 12 2 (set (reg:QI 0 ax [orig:87 D.21515 ] [87])
        (reg:QI 0 ax)) ..\Str\str.cpp:78 86 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 D.21515 ] [87])
            (const_int 0 [0]))) ..\Str\str.cpp:78 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) ..\Str\str.cpp:78 509 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 right+0 S4 A32])) ..\Str\str.cpp:79 83 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [92])) ..\Str\str.cpp:79 83 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 left+0 S4 A32])) ..\Str\str.cpp:79 83 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [93])) ..\Str\str.cpp:79 83 {*movsi_internal}
     (nil))
(call_insn 19 18 20 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZltRK3StrS1_") [flags 0x3]  <function_decl 04e59980 operator<>) [0 operator< S1 A8])
            (const_int 8 [0x8]))) ..\Str\str.cpp:79 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 20 19 21 3 (set (reg:QI 0 ax [94])
        (reg:QI 0 ax)) ..\Str\str.cpp:79 86 {*movqi_internal}
     (nil))
(insn 21 20 22 3 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])
        (reg:QI 0 ax [94])) ..\Str\str.cpp:79 86 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 88 89
(code_label 22 21 23 4 37 "" [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 27 4 (set (reg:QI 0 ax [orig:88 D.21515 ] [88])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 result+0 S1 A8])) ..\Str\str.cpp:80 86 {*movqi_internal}
     (nil))
(insn 27 24 31 4 (set (reg:QI 0 ax [orig:89 <retval> ] [89])
        (reg:QI 0 ax [orig:88 D.21515 ] [88])) ..\Str\str.cpp:80 86 {*movqi_internal}
     (nil))
(insn 31 27 32 4 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:89 <retval> ] [89])) ..\Str\str.cpp:81 86 {*movqi_internal}
     (nil))
(insn 32 31 34 4 (use (reg/i:QI 0 ax)) ..\Str\str.cpp:81 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 34 32 0 NOTE_INSN_DELETED)

;; Function Str& Str::operator+=(const Str&) (_ZN3StrpLERKS_, funcdef_no=1025, decl_uid=20907, cgraph_uid=202, symbol_order=203)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 10
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 35:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 59:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 60:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 61:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 96: point = 0
   Insn 95: point = 0
   Insn 91: point = 1
   Insn 88: point = 3
   Insn 87: point = 4
   Insn 86: point = 5
   Insn 85: point = 6
  BB 9
   Insn 82: point = 7
   Insn 81: point = 7
   Insn 80: point = 8
   Insn 79: point = 10
  BB 8
   Insn 77: point = 11
   Insn 76: point = 11
   Insn 75: point = 12
   Insn 74: point = 14
   Insn 73: point = 15
   Insn 72: point = 16
   Insn 71: point = 17
   Insn 70: point = 19
   Insn 69: point = 21
   Insn 68: point = 22
   Insn 67: point = 24
  BB 6
   Insn 49: point = 25
   Insn 48: point = 25
   Insn 47: point = 26
  BB 7
   Insn 100: point = 27
   Insn 61: point = 27
   Insn 60: point = 27
   Insn 59: point = 27
   Insn 58: point = 28
   Insn 57: point = 30
   Insn 56: point = 32
   Insn 55: point = 33
   Insn 54: point = 35
   Insn 53: point = 36
   Insn 52: point = 38
   Insn 51: point = 39
  BB 5
   Insn 45: point = 40
   Insn 44: point = 40
   Insn 43: point = 41
   Insn 42: point = 43
  BB 3
   Insn 25: point = 44
   Insn 24: point = 44
   Insn 23: point = 45
   Insn 22: point = 47
  BB 4
   Insn 98: point = 48
   Insn 36: point = 48
   Insn 35: point = 48
   Insn 34: point = 49
   Insn 33: point = 51
   Insn 32: point = 53
   Insn 31: point = 54
   Insn 30: point = 56
   Insn 29: point = 57
   Insn 28: point = 59
   Insn 27: point = 60
  BB 2
   Insn 20: point = 61
   Insn 19: point = 61
   Insn 18: point = 62
   Insn 17: point = 64
   Insn 16: point = 65
   Insn 15: point = 65
   Insn 14: point = 66
   Insn 13: point = 68
   Insn 12: point = 70
   Insn 11: point = 71
   Insn 10: point = 72
   Insn 9: point = 74
   Insn 8: point = 76
   Insn 7: point = 77
   Insn 6: point = 79
   Insn 2: point = 80
 r87: [73..77]
 r88: [73..74]
 r89: [67..68]
 r90: [65..66]
 r91: [61..62]
 r92: [44..45]
 r93: [58..60]
 r94: [48..57]
 r95: [52..54]
 r96: [52..53]
 r97: [50..51]
 r98: [48..49]
 r99: [37..39]
 r100: [27..36]
 r101: [31..33]
 r102: [31..32]
 r103: [29..30]
 r104: [27..28]
 r105: [18..22]
 r106: [18..19]
 r107: [15..17]
 r108: [11..12]
 r109: [7..8]
 r110: [2..3]
 r111: [0..1]
 r112: [78..79]
 r113: [75..76]
 r114: [71..72]
 r115: [69..70]
 r116: [63..64]
 r117: [46..47]
 r118: [58..59]
 r119: [55..56]
 r120: [42..43]
 r121: [40..41]
 r122: [25..26]
 r123: [37..38]
 r124: [34..35]
 r125: [23..24]
 r126: [20..21]
 r127: [15..16]
 r128: [13..14]
 r129: [9..10]
 r130: [4..6]
 r131: [4..5]
Compressing live ranges: from 80 to 70 - 87%
Ranges after the compression:
 r87: [64..67]
 r88: [64..65]
 r89: [58..59]
 r90: [56..57]
 r91: [52..53]
 r92: [38..39]
 r93: [50..51]
 r94: [42..49]
 r95: [46..47]
 r96: [46..47]
 r97: [44..45]
 r98: [42..43]
 r99: [32..33]
 r100: [24..31]
 r101: [28..29]
 r102: [28..29]
 r103: [26..27]
 r104: [24..25]
 r105: [16..19]
 r106: [16..17]
 r107: [14..15]
 r108: [10..11]
 r109: [6..7]
 r110: [2..3]
 r111: [0..1]
 r112: [68..69]
 r113: [66..67]
 r114: [62..63]
 r115: [60..61]
 r116: [54..55]
 r117: [40..41]
 r118: [50..51]
 r119: [48..49]
 r120: [36..37]
 r121: [34..35]
 r122: [22..23]
 r123: [32..33]
 r124: [30..31]
 r125: [20..21]
 r126: [18..19]
 r127: [14..15]
 r128: [12..13]
 r129: [8..9]
 r130: [4..5]
 r131: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 29
changing reg in insn 35
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 51
changing reg in insn 53
changing reg in insn 53
changing reg in insn 53
changing reg in insn 59
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 68
changing reg in insn 71
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 88
changing reg in insn 91
changing reg in insn 91
changing reg in insn 95
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 87
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 82.


Str& Str::operator+=(const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={39d,38u} r1={11d,8u,2e} r2={5d,3u} r6={1d,46u} r7={1d,16u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={15d,3u} r18={2d} r19={2d} r20={1d,1u,3e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 333{213d,115u,5e} in 72{70 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 112 113 114 115 116
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:84 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:85 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:87 D.21516 ] [87])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 4 [0x4])) [0 this_8(D)->size+0 S4 A32])) ..\Str\str.cpp:85 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:85 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 D.21516 ] [88])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [113])
                (const_int 4 [0x4])) [0 right_10(D)->size+0 S4 A32])) ..\Str\str.cpp:85 83 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 0 ax [114])
                (plus:SI (reg:SI 0 ax [orig:88 D.21516 ] [88])
                    (reg:SI 1 dx [orig:87 D.21516 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:85 194 {*addsi_1}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sz+0 S4 A32])
        (reg:SI 0 ax [114])) ..\Str\str.cpp:85 83 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sz+0 S4 A32])) ..\Str\str.cpp:86 83 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [orig:89 D.21516 ] [89])
                (plus:SI (reg:SI 0 ax [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:86 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 sz+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:90 D.21517 ] [90])
        (reg:SI 0 ax [orig:89 D.21516 ] [89])) ..\Str\str.cpp:86 83 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:90 D.21517 ] [90])) ..\Str\str.cpp:86 83 {*movsi_internal}
     (nil))
(call_insn 16 15 17 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znaj") [flags 0x43]  <function_decl 041e2580 operator new []>) [0 operator new [] S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:86 565 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [116])
        (reg:SI 0 ax)) ..\Str\str.cpp:86 83 {*movsi_internal}
     (expr_list:REG_NOALIAS (reg/f:SI 0 ax [116])
        (nil)))
(insn 18 17 19 2 (set (reg/f:SI 0 ax [orig:91 D.21518 ] [91])
        (reg/f:SI 0 ax [116])) ..\Str\str.cpp:86 83 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 ts+0 S4 A32])
        (reg/f:SI 0 ax [orig:91 D.21518 ] [91])) ..\Str\str.cpp:86 83 {*movsi_internal}
     (nil))
(insn 20 19 37 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:88 83 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100,0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 117
(code_label 37 20 21 3 41 "" [1 uses])
(note 21 37 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:88 83 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:SI 0 ax [orig:92 D.21516 ] [92])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [117])
                (const_int 4 [0x4])) [0 this_8(D)->size+0 S4 A32])) ..\Str\str.cpp:88 83 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:92 D.21516 ] [92])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) ..\Str\str.cpp:88 7 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) ..\Str\str.cpp:88 509 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 118 119
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg:SI 1 dx [orig:93 D.21517 ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:89 83 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 ts+0 S4 A32])) ..\Str\str.cpp:89 83 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg/f:SI 1 dx [orig:94 D.21518 ] [94])
                (plus:SI (reg:SI 1 dx [orig:93 D.21517 ] [93])
                    (reg/f:SI 0 ax [118])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:89 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 ts+0 S4 A32])
            (reg:SI 1 dx [orig:93 D.21517 ] [93]))
        (nil)))
(insn 30 29 31 4 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:89 83 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg/f:SI 2 cx [orig:95 D.21518 ] [95])
        (mem/f/j:SI (reg/f:SI 0 ax [119]) [0 this_8(D)->source+0 S4 A32])) ..\Str\str.cpp:89 83 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 0 ax [orig:96 D.21517 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:89 83 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:SI 0 ax [orig:97 D.21518 ] [97])
                (plus:SI (reg:SI 0 ax [orig:96 D.21517 ] [96])
                    (reg/f:SI 2 cx [orig:95 D.21518 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:89 194 {*addsi_1}
     (nil))
(insn 34 33 35 4 (set (reg:QI 0 ax [orig:98 D.21519 ] [98])
        (mem:QI (reg/f:SI 0 ax [orig:97 D.21518 ] [97]) [0 *_24+0 S1 A8])) ..\Str\str.cpp:89 86 {*movqi_internal}
     (nil))
(insn 35 34 36 4 (set (mem:QI (reg/f:SI 1 dx [orig:94 D.21518 ] [94]) [0 *_21+0 S1 A8])
        (reg:QI 0 ax [orig:98 D.21519 ] [98])) ..\Str\str.cpp:89 86 {*movqi_internal}
     (nil))
(insn 36 35 98 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:88 194 {*addsi_1}
     (nil))
(jump_insn 98 36 99 4 (set (pc)
        (label_ref 37)) ..\Str\str.cpp:88 551 {jump}
     (nil)
 -> 37)
;;  succ:       3 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 99 98 40)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 120 121
(code_label 40 99 41 5 40 "" [1 uses])
(note 41 40 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:90 83 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:SI 0 ax [121])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [120])
                (const_int 4 [0x4])) [0 this_8(D)->size+0 S4 A32])) ..\Str\str.cpp:90 83 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 ii+0 S4 A32])
        (reg:SI 0 ax [121])) ..\Str\str.cpp:90 83 {*movsi_internal}
     (nil))
(insn 45 44 62 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:90 83 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100,0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122
(code_label 62 45 46 6 43 "" [1 uses])
(note 46 62 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 ii+0 S4 A32])) ..\Str\str.cpp:90 83 {*movsi_internal}
     (nil))
(insn 48 47 49 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [122])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 sz+0 S4 A32]))) ..\Str\str.cpp:90 7 {*cmpsi_1}
     (nil))
(jump_insn 49 48 50 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) ..\Str\str.cpp:90 509 {*jcc_1}
     (nil)
 -> 65)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 103 104 123 124
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 7 (set (reg:SI 1 dx [orig:99 D.21517 ] [99])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 ii+0 S4 A32])) ..\Str\str.cpp:91 83 {*movsi_internal}
     (nil))
(insn 52 51 53 7 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 ts+0 S4 A32])) ..\Str\str.cpp:91 83 {*movsi_internal}
     (nil))
(insn 53 52 54 7 (parallel [
            (set (reg/f:SI 1 dx [orig:100 D.21518 ] [100])
                (plus:SI (reg:SI 1 dx [orig:99 D.21517 ] [99])
                    (reg/f:SI 0 ax [123])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:91 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 ts+0 S4 A32])
            (reg:SI 1 dx [orig:99 D.21517 ] [99]))
        (nil)))
(insn 54 53 55 7 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:91 83 {*movsi_internal}
     (nil))
(insn 55 54 56 7 (set (reg/f:SI 2 cx [orig:101 D.21518 ] [101])
        (mem/f/j:SI (reg/f:SI 0 ax [124]) [0 right_10(D)->source+0 S4 A32])) ..\Str\str.cpp:91 83 {*movsi_internal}
     (nil))
(insn 56 55 57 7 (set (reg:SI 0 ax [orig:102 D.21517 ] [102])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) ..\Str\str.cpp:91 83 {*movsi_internal}
     (nil))
(insn 57 56 58 7 (parallel [
            (set (reg/f:SI 0 ax [orig:103 D.21518 ] [103])
                (plus:SI (reg:SI 0 ax [orig:102 D.21517 ] [102])
                    (reg/f:SI 2 cx [orig:101 D.21518 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:91 194 {*addsi_1}
     (nil))
(insn 58 57 59 7 (set (reg:QI 0 ax [orig:104 D.21519 ] [104])
        (mem:QI (reg/f:SI 0 ax [orig:103 D.21518 ] [103]) [0 *_34+0 S1 A8])) ..\Str\str.cpp:91 86 {*movqi_internal}
     (nil))
(insn 59 58 60 7 (set (mem:QI (reg/f:SI 1 dx [orig:100 D.21518 ] [100]) [0 *_31+0 S1 A8])
        (reg:QI 0 ax [orig:104 D.21519 ] [104])) ..\Str\str.cpp:91 86 {*movqi_internal}
     (nil))
(insn 60 59 61 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 ii+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 ii+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:90 194 {*addsi_1}
     (nil))
(insn 61 60 100 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:90 194 {*addsi_1}
     (nil))
(jump_insn 100 61 101 7 (set (pc)
        (label_ref 62)) ..\Str\str.cpp:90 551 {jump}
     (nil)
 -> 62)
;;  succ:       6 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 101 100 65)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 125 126 127 128
(code_label 65 101 66 8 42 "" [1 uses])
(note 66 65 67 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 8 (set (reg/f:SI 0 ax [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:93 83 {*movsi_internal}
     (nil))
(insn 68 67 69 8 (set (reg:SI 1 dx [orig:105 D.21516 ] [105])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [125])
                (const_int 4 [0x4])) [0 this_8(D)->size+0 S4 A32])) ..\Str\str.cpp:93 83 {*movsi_internal}
     (nil))
(insn 69 68 70 8 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:93 83 {*movsi_internal}
     (nil))
(insn 70 69 71 8 (set (reg:SI 0 ax [orig:106 D.21516 ] [106])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [126])
                (const_int 4 [0x4])) [0 right_10(D)->size+0 S4 A32])) ..\Str\str.cpp:93 83 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (parallel [
            (set (reg:SI 1 dx [orig:107 D.21516 ] [107])
                (plus:SI (reg:SI 1 dx [orig:105 D.21516 ] [105])
                    (reg:SI 0 ax [orig:106 D.21516 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:93 194 {*addsi_1}
     (nil))
(insn 72 71 73 8 (set (reg/f:SI 0 ax [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:93 83 {*movsi_internal}
     (nil))
(insn 73 72 74 8 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [127])
                (const_int 4 [0x4])) [0 this_8(D)->size+0 S4 A32])
        (reg:SI 1 dx [orig:107 D.21516 ] [107])) ..\Str\str.cpp:93 83 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg/f:SI 0 ax [128])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:94 83 {*movsi_internal}
     (nil))
(insn 75 74 76 8 (set (reg/f:SI 0 ax [orig:108 D.21518 ] [108])
        (mem/f/j:SI (reg/f:SI 0 ax [128]) [0 this_8(D)->source+0 S4 A32])) ..\Str\str.cpp:94 83 {*movsi_internal}
     (nil))
(insn 76 75 77 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:108 D.21518 ] [108])
            (const_int 0 [0]))) ..\Str\str.cpp:94 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 77 76 78 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) ..\Str\str.cpp:94 509 {*jcc_1}
     (nil)
 -> 83)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 129
(note 78 77 79 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 9 (set (reg/f:SI 0 ax [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:94 83 {*movsi_internal}
     (nil))
(insn 80 79 81 9 (set (reg/f:SI 0 ax [orig:109 D.21518 ] [109])
        (mem/f/j:SI (reg/f:SI 0 ax [129]) [0 this_8(D)->source+0 S4 A32])) ..\Str\str.cpp:94 83 {*movsi_internal}
     (nil))
(insn 81 80 82 9 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:109 D.21518 ] [109])) ..\Str\str.cpp:94 83 {*movsi_internal}
     (nil))
(call_insn 82 81 83 9 (call (mem:QI (symbol_ref:SI ("_ZdaPv") [flags 0x43]  <function_decl 041e2680 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 4 [0x4])) ..\Str\str.cpp:94 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 110 111 130 131
(code_label 83 82 84 10 44 "" [1 uses])
(note 84 83 85 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 10 (set (reg/f:SI 0 ax [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:95 83 {*movsi_internal}
     (nil))
(insn 86 85 87 10 (set (reg/f:SI 1 dx [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 ts+0 S4 A32])) ..\Str\str.cpp:95 83 {*movsi_internal}
     (nil))
(insn 87 86 88 10 (set (mem/f/j:SI (reg/f:SI 0 ax [130]) [0 this_8(D)->source+0 S4 A32])
        (reg/f:SI 1 dx [131])) ..\Str\str.cpp:95 83 {*movsi_internal}
     (nil))
(insn 88 87 91 10 (set (reg/f:SI 0 ax [orig:110 D.21520 ] [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 this+0 S4 A32])) ..\Str\str.cpp:97 83 {*movsi_internal}
     (nil))
(insn 91 88 95 10 (set (reg:SI 0 ax [orig:111 <retval> ] [111])
        (reg/f:SI 0 ax [orig:110 D.21520 ] [110])) ..\Str\str.cpp:97 83 {*movsi_internal}
     (nil))
(insn 95 91 96 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:111 <retval> ] [111])) ..\Str\str.cpp:98 83 {*movsi_internal}
     (nil))
(insn 96 95 102 10 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:98 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 102 96 0 NOTE_INSN_DELETED)

;; Function Str& Str::operator+=(char) (_ZN3StrpLEc, funcdef_no=1026, decl_uid=20910, cgraph_uid=203, symbol_order=204)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 35:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 48:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 51:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 79:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 88: point = 0
   Insn 87: point = 0
   Insn 83: point = 1
   Insn 80: point = 3
   Insn 79: point = 4
   Insn 78: point = 5
   Insn 77: point = 7
   Insn 76: point = 9
   Insn 75: point = 11
   Insn 74: point = 12
   Insn 73: point = 14
   Insn 72: point = 15
   Insn 71: point = 16
   Insn 70: point = 17
  BB 7
   Insn 67: point = 18
   Insn 66: point = 18
   Insn 65: point = 19
   Insn 64: point = 21
  BB 6
   Insn 62: point = 22
   Insn 61: point = 22
   Insn 60: point = 23
   Insn 59: point = 25
  BB 5
   Insn 57: point = 26
   Insn 56: point = 26
   Insn 55: point = 27
   Insn 54: point = 29
   Insn 53: point = 30
   Insn 52: point = 31
   Insn 51: point = 32
   Insn 50: point = 34
   Insn 49: point = 36
   Insn 48: point = 37
   Insn 47: point = 38
   Insn 46: point = 39
   Insn 45: point = 41
   Insn 44: point = 42
   Insn 43: point = 44
   Insn 42: point = 46
  BB 3
   Insn 25: point = 47
   Insn 24: point = 47
   Insn 23: point = 48
   Insn 22: point = 50
  BB 4
   Insn 90: point = 51
   Insn 36: point = 51
   Insn 35: point = 51
   Insn 34: point = 52
   Insn 33: point = 54
   Insn 32: point = 56
   Insn 31: point = 57
   Insn 30: point = 59
   Insn 29: point = 60
   Insn 28: point = 62
   Insn 27: point = 63
  BB 2
   Insn 20: point = 64
   Insn 19: point = 64
   Insn 18: point = 65
   Insn 17: point = 67
   Insn 16: point = 68
   Insn 15: point = 68
   Insn 14: point = 69
   Insn 13: point = 71
   Insn 12: point = 73
   Insn 11: point = 74
   Insn 10: point = 75
   Insn 9: point = 77
   Insn 8: point = 79
   Insn 4: point = 80
   Insn 3: point = 81
   Insn 2: point = 82
 r87: [76..77]
 r88: [70..71]
 r89: [68..69]
 r90: [64..65]
 r91: [47..48]
 r92: [61..63]
 r93: [51..60]
 r94: [55..57]
 r95: [55..56]
 r96: [53..54]
 r97: [51..52]
 r98: [43..44]
 r99: [40..42]
 r100: [37..39]
 r101: [37..38]
 r102: [33..34]
 r103: [30..32]
 r104: [26..27]
 r105: [22..23]
 r106: [18..19]
 r107: [6..12]
 r108: [8..9]
 r109: [6..7]
 r110: [4..5]
 r111: [2..3]
 r112: [0..1]
 r113: [80..81]
 r114: [78..79]
 r115: [74..75]
 r116: [72..73]
 r117: [66..67]
 r118: [49..50]
 r119: [61..62]
 r120: [58..59]
 r121: [45..46]
 r122: [40..41]
 r123: [35..36]
 r124: [30..31]
 r125: [28..29]
 r126: [24..25]
 r127: [20..21]
 r128: [15..17]
 r129: [15..16]
 r130: [13..14]
 r131: [10..11]
Compressing live ranges: from 82 to 74 - 90%
Ranges after the compression:
 r87: [68..69]
 r88: [62..63]
 r89: [60..61]
 r90: [56..57]
 r91: [42..43]
 r92: [54..55]
 r93: [46..53]
 r94: [50..51]
 r95: [50..51]
 r96: [48..49]
 r97: [46..47]
 r98: [38..39]
 r99: [36..37]
 r100: [34..35]
 r101: [34..35]
 r102: [30..31]
 r103: [28..29]
 r104: [24..25]
 r105: [20..21]
 r106: [16..17]
 r107: [6..11]
 r108: [8..9]
 r109: [6..7]
 r110: [4..5]
 r111: [2..3]
 r112: [0..1]
 r113: [72..73]
 r114: [70..71]
 r115: [66..67]
 r116: [64..65]
 r117: [58..59]
 r118: [44..45]
 r119: [54..55]
 r120: [52..53]
 r121: [40..41]
 r122: [36..37]
 r123: [32..33]
 r124: [28..29]
 r125: [26..27]
 r126: [22..23]
 r127: [18..19]
 r128: [14..15]
 r129: [14..15]
 r130: [12..13]
 r131: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 29
changing reg in insn 35
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 83
changing reg in insn 87
changing reg in insn 3
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
changing reg in insn 64
changing reg in insn 65
changing reg in insn 70
changing reg in insn 72
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 67.


Str& Str::operator+=(char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={41d,40u} r1={10d,7u,2e} r2={4d,2u} r6={1d,37u} r7={1d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={13d,3u} r18={2d} r19={2d} r20={1d,1u,3e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 320{211d,104u,5e} in 69{67 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 113 114 115 116 117
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:101 83 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:101 83 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 right+0 S1 A32])
        (reg:QI 0 ax [113])) ..\Str\str.cpp:101 86 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:102 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:87 D.21521 ] [87])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:102 83 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 0 ax [115])
                (plus:SI (reg:SI 0 ax [orig:87 D.21521 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:102 194 {*addsi_1}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 sz+0 S4 A32])
        (reg:SI 0 ax [115])) ..\Str\str.cpp:102 83 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [116])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 sz+0 S4 A32])) ..\Str\str.cpp:103 83 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [orig:88 D.21521 ] [88])
                (plus:SI (reg:SI 0 ax [116])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:103 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 sz+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:89 D.21522 ] [89])
        (reg:SI 0 ax [orig:88 D.21521 ] [88])) ..\Str\str.cpp:103 83 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:89 D.21522 ] [89])) ..\Str\str.cpp:103 83 {*movsi_internal}
     (nil))
(call_insn 16 15 17 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znaj") [flags 0x43]  <function_decl 041e2580 operator new []>) [0 operator new [] S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:103 565 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [117])
        (reg:SI 0 ax)) ..\Str\str.cpp:103 83 {*movsi_internal}
     (expr_list:REG_NOALIAS (reg/f:SI 0 ax [117])
        (nil)))
(insn 18 17 19 2 (set (reg/f:SI 0 ax [orig:90 D.21523 ] [90])
        (reg/f:SI 0 ax [117])) ..\Str\str.cpp:103 83 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 ts+0 S4 A32])
        (reg/f:SI 0 ax [orig:90 D.21523 ] [90])) ..\Str\str.cpp:103 83 {*movsi_internal}
     (nil))
(insn 20 19 37 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:105 83 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100,0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 118
(code_label 37 20 21 3 48 "" [1 uses])
(note 21 37 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:105 83 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:SI 0 ax [orig:91 D.21521 ] [91])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [118])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:105 83 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:91 D.21521 ] [91])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) ..\Str\str.cpp:105 7 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) ..\Str\str.cpp:105 509 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 95 96 97 119 120
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg:SI 1 dx [orig:92 D.21522 ] [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:106 83 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 ts+0 S4 A32])) ..\Str\str.cpp:106 83 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg/f:SI 1 dx [orig:93 D.21523 ] [93])
                (plus:SI (reg:SI 1 dx [orig:92 D.21522 ] [92])
                    (reg/f:SI 0 ax [119])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:106 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 ts+0 S4 A32])
            (reg:SI 1 dx [orig:92 D.21522 ] [92]))
        (nil)))
(insn 30 29 31 4 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:106 83 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg/f:SI 2 cx [orig:94 D.21523 ] [94])
        (mem/f/j:SI (reg/f:SI 0 ax [120]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:106 83 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 0 ax [orig:95 D.21522 ] [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:106 83 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:SI 0 ax [orig:96 D.21523 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 D.21522 ] [95])
                    (reg/f:SI 2 cx [orig:94 D.21523 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:106 194 {*addsi_1}
     (nil))
(insn 34 33 35 4 (set (reg:QI 0 ax [orig:97 D.21524 ] [97])
        (mem:QI (reg/f:SI 0 ax [orig:96 D.21523 ] [96]) [0 *_19+0 S1 A8])) ..\Str\str.cpp:106 86 {*movqi_internal}
     (nil))
(insn 35 34 36 4 (set (mem:QI (reg/f:SI 1 dx [orig:93 D.21523 ] [93]) [0 *_16+0 S1 A8])
        (reg:QI 0 ax [orig:97 D.21524 ] [97])) ..\Str\str.cpp:106 86 {*movqi_internal}
     (nil))
(insn 36 35 90 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:105 194 {*addsi_1}
     (nil))
(jump_insn 90 36 91 4 (set (pc)
        (label_ref 37)) ..\Str\str.cpp:105 551 {jump}
     (nil)
 -> 37)
;;  succ:       3 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 91 90 40)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 101 102 103 104 121 122 123 124 125
(code_label 40 91 41 5 47 "" [1 uses])
(note 41 40 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:107 83 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:SI 0 ax [orig:98 D.21521 ] [98])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [121])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:107 83 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:SI 1 dx [orig:99 D.21522 ] [99])
        (reg:SI 0 ax [orig:98 D.21521 ] [98])) ..\Str\str.cpp:107 83 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 ts+0 S4 A32])) ..\Str\str.cpp:107 83 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg/f:SI 1 dx [orig:100 D.21523 ] [100])
                (plus:SI (reg:SI 1 dx [orig:99 D.21522 ] [99])
                    (reg/f:SI 0 ax [122])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:107 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 ts+0 S4 A32])
            (reg:SI 1 dx [orig:99 D.21522 ] [99]))
        (nil)))
(insn 47 46 48 5 (set (reg:QI 0 ax [orig:101 D.21524 ] [101])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 right+0 S1 A32])) ..\Str\str.cpp:107 86 {*movqi_internal}
     (nil))
(insn 48 47 49 5 (set (mem:QI (reg/f:SI 1 dx [orig:100 D.21523 ] [100]) [0 *_25+0 S1 A8])
        (reg:QI 0 ax [orig:101 D.21524 ] [101])) ..\Str\str.cpp:107 86 {*movqi_internal}
     (nil))
(insn 49 48 50 5 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:109 83 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:SI 0 ax [orig:102 D.21521 ] [102])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [123])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:109 83 {*movsi_internal}
     (nil))
(insn 51 50 52 5 (parallel [
            (set (reg:SI 1 dx [orig:103 D.21521 ] [103])
                (plus:SI (reg:SI 0 ax [orig:102 D.21521 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:109 194 {*addsi_1}
     (nil))
(insn 52 51 53 5 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:109 83 {*movsi_internal}
     (nil))
(insn 53 52 54 5 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [124])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])
        (reg:SI 1 dx [orig:103 D.21521 ] [103])) ..\Str\str.cpp:109 83 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg/f:SI 0 ax [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:110 83 {*movsi_internal}
     (nil))
(insn 55 54 56 5 (set (reg/f:SI 0 ax [orig:104 D.21523 ] [104])
        (mem/f/j:SI (reg/f:SI 0 ax [125]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:110 83 {*movsi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:104 D.21523 ] [104])
            (const_int 0 [0]))) ..\Str\str.cpp:110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 57 56 58 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) ..\Str\str.cpp:110 509 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 126
(note 58 57 59 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 6 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:111 83 {*movsi_internal}
     (nil))
(insn 60 59 61 6 (set (reg/f:SI 0 ax [orig:105 D.21523 ] [105])
        (mem/f/j:SI (reg/f:SI 0 ax [126]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:111 83 {*movsi_internal}
     (nil))
(insn 61 60 62 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:105 D.21523 ] [105])
            (const_int 0 [0]))) ..\Str\str.cpp:111 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 62 61 63 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) ..\Str\str.cpp:111 509 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 106 127
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg/f:SI 0 ax [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:111 83 {*movsi_internal}
     (nil))
(insn 65 64 66 7 (set (reg/f:SI 0 ax [orig:106 D.21523 ] [106])
        (mem/f/j:SI (reg/f:SI 0 ax [127]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:111 83 {*movsi_internal}
     (nil))
(insn 66 65 67 7 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:106 D.21523 ] [106])) ..\Str\str.cpp:111 83 {*movsi_internal}
     (nil))
(call_insn 67 66 68 7 (call (mem:QI (symbol_ref:SI ("_ZdaPv") [flags 0x43]  <function_decl 041e2680 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 4 [0x4])) ..\Str\str.cpp:111 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              7 (FALLTHRU)
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 107 108 109 110 111 112 128 129 130 131
(code_label 68 67 69 8 49 "" [2 uses])
(note 69 68 70 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 8 (set (reg/f:SI 0 ax [128])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:112 83 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (set (reg/f:SI 1 dx [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 ts+0 S4 A32])) ..\Str\str.cpp:112 83 {*movsi_internal}
     (nil))
(insn 72 71 73 8 (set (mem/f/j:SI (reg/f:SI 0 ax [128]) [0 this_5(D)->source+0 S4 A32])
        (reg/f:SI 1 dx [129])) ..\Str\str.cpp:112 83 {*movsi_internal}
     (nil))
(insn 73 72 74 8 (set (reg/f:SI 0 ax [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:113 83 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg/f:SI 1 dx [orig:107 D.21523 ] [107])
        (mem/f/j:SI (reg/f:SI 0 ax [130]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:113 83 {*movsi_internal}
     (nil))
(insn 75 74 76 8 (set (reg/f:SI 0 ax [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:113 83 {*movsi_internal}
     (nil))
(insn 76 75 77 8 (set (reg:SI 0 ax [orig:108 D.21521 ] [108])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [131])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:113 83 {*movsi_internal}
     (nil))
(insn 77 76 78 8 (set (reg:SI 0 ax [orig:109 D.21522 ] [109])
        (reg:SI 0 ax [orig:108 D.21521 ] [108])) ..\Str\str.cpp:113 83 {*movsi_internal}
     (nil))
(insn 78 77 79 8 (parallel [
            (set (reg/f:SI 0 ax [orig:110 D.21523 ] [110])
                (plus:SI (reg:SI 0 ax [orig:109 D.21522 ] [109])
                    (reg/f:SI 1 dx [orig:107 D.21523 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:113 194 {*addsi_1}
     (nil))
(insn 79 78 80 8 (set (mem:QI (reg/f:SI 0 ax [orig:110 D.21523 ] [110]) [0 *_40+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:113 86 {*movqi_internal}
     (nil))
(insn 80 79 83 8 (set (reg/f:SI 0 ax [orig:111 D.21525 ] [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:114 83 {*movsi_internal}
     (nil))
(insn 83 80 87 8 (set (reg:SI 0 ax [orig:112 <retval> ] [112])
        (reg/f:SI 0 ax [orig:111 D.21525 ] [111])) ..\Str\str.cpp:114 83 {*movsi_internal}
     (nil))
(insn 87 83 88 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:112 <retval> ] [112])) ..\Str\str.cpp:115 83 {*movsi_internal}
     (nil))
(insn 88 87 92 8 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:115 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 92 88 0 NOTE_INSN_DELETED)

;; Function Str& Str::operator=(const char*) (_ZN3StraSEPKc, funcdef_no=1027, decl_uid=20898, cgraph_uid=204, symbol_order=205)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 65:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 66:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 78:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 87: point = 0
   Insn 86: point = 0
   Insn 82: point = 1
   Insn 79: point = 3
   Insn 78: point = 4
   Insn 77: point = 5
   Insn 76: point = 7
   Insn 75: point = 9
   Insn 74: point = 11
   Insn 73: point = 12
   Insn 72: point = 14
  BB 8
   Insn 54: point = 15
   Insn 53: point = 15
   Insn 52: point = 16
   Insn 51: point = 18
  BB 9
   Insn 91: point = 19
   Insn 66: point = 19
   Insn 65: point = 19
   Insn 64: point = 20
   Insn 63: point = 22
   Insn 62: point = 24
   Insn 61: point = 26
   Insn 60: point = 27
   Insn 59: point = 28
   Insn 58: point = 30
   Insn 57: point = 31
   Insn 56: point = 33
  BB 7
   Insn 49: point = 34
   Insn 48: point = 34
   Insn 47: point = 35
   Insn 46: point = 36
   Insn 45: point = 38
   Insn 44: point = 39
   Insn 43: point = 39
   Insn 42: point = 40
   Insn 41: point = 42
   Insn 40: point = 44
   Insn 39: point = 46
  BB 5
   Insn 27: point = 47
   Insn 26: point = 47
   Insn 25: point = 48
   Insn 24: point = 50
   Insn 23: point = 52
   Insn 22: point = 53
   Insn 21: point = 55
   Insn 20: point = 57
  BB 6
   Insn 89: point = 58
   Insn 33: point = 58
   Insn 32: point = 59
   Insn 31: point = 60
   Insn 30: point = 62
   Insn 29: point = 64
  BB 4
   Insn 18: point = 65
   Insn 17: point = 66
  BB 3
   Insn 14: point = 67
   Insn 13: point = 67
   Insn 12: point = 68
   Insn 11: point = 70
  BB 2
   Insn 9: point = 71
   Insn 8: point = 71
   Insn 7: point = 72
   Insn 6: point = 74
   Insn 2: point = 75
 r87: [71..72]
 r88: [67..68]
 r89: [54..55]
 r90: [51..53]
 r91: [49..50]
 r92: [47..48]
 r93: [61..62]
 r94: [58..60]
 r95: [43..44]
 r96: [41..42]
 r97: [39..40]
 r98: [34..36]
 r99: [15..16]
 r100: [29..31]
 r101: [29..30]
 r102: [19..28]
 r103: [25..27]
 r104: [23..24]
 r105: [21..22]
 r106: [19..20]
 r107: [6..12]
 r108: [8..9]
 r109: [6..7]
 r110: [4..5]
 r111: [2..3]
 r112: [0..1]
 r113: [73..74]
 r114: [69..70]
 r115: [65..66]
 r116: [56..57]
 r117: [51..52]
 r118: [63..64]
 r119: [58..59]
 r120: [45..46]
 r121: [37..38]
 r122: [34..35]
 r123: [17..18]
 r124: [32..33]
 r125: [25..26]
 r126: [13..14]
 r127: [10..11]
Compressing live ranges: from 75 to 68 - 90%
Ranges after the compression:
 r87: [64..65]
 r88: [60..61]
 r89: [48..49]
 r90: [46..47]
 r91: [44..45]
 r92: [42..43]
 r93: [54..55]
 r94: [52..53]
 r95: [38..39]
 r96: [36..37]
 r97: [34..35]
 r98: [30..31]
 r99: [14..15]
 r100: [26..27]
 r101: [26..27]
 r102: [18..25]
 r103: [24..25]
 r104: [22..23]
 r105: [20..21]
 r106: [18..19]
 r107: [6..11]
 r108: [8..9]
 r109: [6..7]
 r110: [4..5]
 r111: [2..3]
 r112: [0..1]
 r113: [66..67]
 r114: [62..63]
 r115: [58..59]
 r116: [50..51]
 r117: [46..47]
 r118: [56..57]
 r119: [52..53]
 r120: [40..41]
 r121: [32..33]
 r122: [30..31]
 r123: [16..17]
 r124: [28..29]
 r125: [24..25]
 r126: [12..13]
 r127: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 65
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 82
changing reg in insn 86
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 57
changing reg in insn 61
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
deleting insn with uid = 64.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 44.


Str& Str::operator=(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={35d,34u} r1={11d,8u,1e} r2={4d,2u,1e} r6={1d,32u} r7={1d,16u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={2e} r17={12d,3u} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 305{205d,96u,4e} in 62{60 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 113
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:118 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:121 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [orig:87 D.21526 ] [87])
        (mem/f/j:SI (reg/f:SI 0 ax [113]) [0 this_6(D)->source+0 S4 A32])) ..\Str\str.cpp:121 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:87 D.21526 ] [87])
            (const_int 0 [0]))) ..\Str\str.cpp:121 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) ..\Str\str.cpp:121 509 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 114
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:121 83 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 0 ax [orig:88 D.21526 ] [88])
        (mem/f/j:SI (reg/f:SI 0 ax [114]) [0 this_6(D)->source+0 S4 A32])) ..\Str\str.cpp:121 83 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.21526 ] [88])) ..\Str\str.cpp:121 83 {*movsi_internal}
     (nil))
(call_insn 14 13 15 3 (call (mem:QI (symbol_ref:SI ("_ZdaPv") [flags 0x43]  <function_decl 041e2680 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 4 [0x4])) ..\Str\str.cpp:121 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 115
(code_label 15 14 16 4 52 "" [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:122 83 {*movsi_internal}
     (nil))
(insn 18 17 34 4 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [115])
                (const_int 4 [0x4])) [0 this_6(D)->size+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:122 83 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100,0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 116 117
(code_label 34 18 19 5 54 "" [1 uses])
(note 19 34 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(insn 21 20 22 5 (set (reg:SI 0 ax [orig:89 D.21527 ] [89])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 4 [0x4])) [0 this_6(D)->size+0 S4 A32])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (reg:SI 1 dx [orig:90 D.21528 ] [90])
        (reg:SI 0 ax [orig:89 D.21527 ] [89])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(insn 23 22 24 5 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg/f:SI 0 ax [orig:91 D.21529 ] [91])
                (plus:SI (reg/f:SI 0 ax [117])
                    (reg:SI 1 dx [orig:90 D.21528 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:123 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 right+0 S4 A32])
            (reg:SI 1 dx [orig:90 D.21528 ] [90]))
        (nil)))
(insn 25 24 26 5 (set (reg:QI 0 ax [orig:92 D.21530 ] [92])
        (mem:QI (reg/f:SI 0 ax [orig:91 D.21529 ] [91]) [0 *_14+0 S1 A8])) ..\Str\str.cpp:123 86 {*movqi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 D.21530 ] [92])
            (const_int 0 [0]))) ..\Str\str.cpp:123 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) ..\Str\str.cpp:123 509 {*jcc_1}
     (nil)
 -> 37)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 118 119
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:SI 0 ax [orig:93 D.21527 ] [93])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [118])
                (const_int 4 [0x4])) [0 this_6(D)->size+0 S4 A32])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg:SI 1 dx [orig:94 D.21527 ] [94])
                (plus:SI (reg:SI 0 ax [orig:93 D.21527 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:123 194 {*addsi_1}
     (nil))
(insn 32 31 33 6 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(insn 33 32 89 6 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [119])
                (const_int 4 [0x4])) [0 this_6(D)->size+0 S4 A32])
        (reg:SI 1 dx [orig:94 D.21527 ] [94])) ..\Str\str.cpp:123 83 {*movsi_internal}
     (nil))
(jump_insn 89 33 90 6 (set (pc)
        (label_ref 34)) ..\Str\str.cpp:123 551 {jump}
     (nil)
 -> 34)
;;  succ:       5 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 90 89 37)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 96 97 98 120 121 122
(code_label 37 90 38 7 53 "" [1 uses])
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:124 83 {*movsi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:SI 0 ax [orig:95 D.21527 ] [95])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [120])
                (const_int 4 [0x4])) [0 this_6(D)->size+0 S4 A32])) ..\Str\str.cpp:124 83 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (parallel [
            (set (reg:SI 0 ax [orig:96 D.21527 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 D.21527 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:124 194 {*addsi_1}
     (nil))
(insn 42 41 43 7 (set (reg:SI 0 ax [orig:97 D.21528 ] [97])
        (reg:SI 0 ax [orig:96 D.21527 ] [96])) ..\Str\str.cpp:124 83 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:97 D.21528 ] [97])) ..\Str\str.cpp:124 83 {*movsi_internal}
     (nil))
(call_insn 44 43 45 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znaj") [flags 0x43]  <function_decl 041e2580 operator new []>) [0 operator new [] S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:124 565 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 45 44 46 7 (set (reg/f:SI 0 ax [121])
        (reg:SI 0 ax)) ..\Str\str.cpp:124 83 {*movsi_internal}
     (expr_list:REG_NOALIAS (reg/f:SI 0 ax [121])
        (nil)))
(insn 46 45 47 7 (set (reg/f:SI 1 dx [orig:98 D.21531 ] [98])
        (reg/f:SI 0 ax [121])) ..\Str\str.cpp:124 83 {*movsi_internal}
     (nil))
(insn 47 46 48 7 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:124 83 {*movsi_internal}
     (nil))
(insn 48 47 49 7 (set (mem/f/j:SI (reg/f:SI 0 ax [122]) [0 this_6(D)->source+0 S4 A32])
        (reg/f:SI 1 dx [orig:98 D.21531 ] [98])) ..\Str\str.cpp:124 83 {*movsi_internal}
     (nil))
(insn 49 48 67 7 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:125 83 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              9 [100,0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 123
(code_label 67 49 50 8 56 "" [1 uses])
(note 50 67 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:125 83 {*movsi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:SI 0 ax [orig:99 D.21527 ] [99])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [123])
                (const_int 4 [0x4])) [0 this_6(D)->size+0 S4 A32])) ..\Str\str.cpp:125 83 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 D.21527 ] [99])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) ..\Str\str.cpp:125 7 {*cmpsi_1}
     (nil))
(jump_insn 54 53 55 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) ..\Str\str.cpp:125 509 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 103 104 105 106 124 125
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:126 83 {*movsi_internal}
     (nil))
(insn 57 56 58 9 (set (reg/f:SI 1 dx [orig:100 D.21526 ] [100])
        (mem/f/j:SI (reg/f:SI 0 ax [124]) [0 this_6(D)->source+0 S4 A32])) ..\Str\str.cpp:126 83 {*movsi_internal}
     (nil))
(insn 58 57 59 9 (set (reg:SI 0 ax [orig:101 D.21528 ] [101])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:126 83 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (parallel [
            (set (reg/f:SI 0 ax [orig:102 D.21526 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 D.21528 ] [101])
                    (reg/f:SI 1 dx [orig:100 D.21526 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:126 194 {*addsi_1}
     (nil))
(insn 60 59 61 9 (set (reg:SI 2 cx [orig:103 D.21528 ] [103])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:126 83 {*movsi_internal}
     (nil))
(insn 61 60 62 9 (set (reg/f:SI 1 dx [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:126 83 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (parallel [
            (set (reg/f:SI 1 dx [orig:104 D.21529 ] [104])
                (plus:SI (reg/f:SI 1 dx [125])
                    (reg:SI 2 cx [orig:103 D.21528 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:126 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 right+0 S4 A32])
            (reg:SI 2 cx [orig:103 D.21528 ] [103]))
        (nil)))
(insn 63 62 65 9 (set (reg:QI 1 dx [orig:105 D.21530 ] [105])
        (mem:QI (reg/f:SI 1 dx [orig:104 D.21529 ] [104]) [0 *_32+0 S1 A8])) ..\Str\str.cpp:126 86 {*movqi_internal}
     (nil))
(insn 65 63 66 9 (set (mem:QI (reg/f:SI 0 ax [orig:102 D.21526 ] [102]) [0 *_30+0 S1 A8])
        (reg:QI 1 dx [orig:106 D.21532 ] [106])) ..\Str\str.cpp:126 86 {*movqi_internal}
     (nil))
(insn 66 65 91 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:125 194 {*addsi_1}
     (nil))
(jump_insn 91 66 92 9 (set (pc)
        (label_ref 67)) ..\Str\str.cpp:125 551 {jump}
     (nil)
 -> 67)
;;  succ:       8 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 92 91 70)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 107 108 109 110 111 112 126 127
(code_label 70 92 71 10 55 "" [1 uses])
(note 71 70 72 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 10 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:128 83 {*movsi_internal}
     (nil))
(insn 73 72 74 10 (set (reg/f:SI 1 dx [orig:107 D.21526 ] [107])
        (mem/f/j:SI (reg/f:SI 0 ax [126]) [0 this_6(D)->source+0 S4 A32])) ..\Str\str.cpp:128 83 {*movsi_internal}
     (nil))
(insn 74 73 75 10 (set (reg/f:SI 0 ax [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:128 83 {*movsi_internal}
     (nil))
(insn 75 74 76 10 (set (reg:SI 0 ax [orig:108 D.21527 ] [108])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [127])
                (const_int 4 [0x4])) [0 this_6(D)->size+0 S4 A32])) ..\Str\str.cpp:128 83 {*movsi_internal}
     (nil))
(insn 76 75 77 10 (set (reg:SI 0 ax [orig:109 D.21528 ] [109])
        (reg:SI 0 ax [orig:108 D.21527 ] [108])) ..\Str\str.cpp:128 83 {*movsi_internal}
     (nil))
(insn 77 76 78 10 (parallel [
            (set (reg/f:SI 0 ax [orig:110 D.21526 ] [110])
                (plus:SI (reg:SI 0 ax [orig:109 D.21528 ] [109])
                    (reg/f:SI 1 dx [orig:107 D.21526 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:128 194 {*addsi_1}
     (nil))
(insn 78 77 79 10 (set (mem:QI (reg/f:SI 0 ax [orig:110 D.21526 ] [110]) [0 *_40+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:128 86 {*movqi_internal}
     (nil))
(insn 79 78 82 10 (set (reg/f:SI 0 ax [orig:111 D.21533 ] [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:130 83 {*movsi_internal}
     (nil))
(insn 82 79 86 10 (set (reg:SI 0 ax [orig:112 <retval> ] [112])
        (reg/f:SI 0 ax [orig:111 D.21533 ] [111])) ..\Str\str.cpp:130 83 {*movsi_internal}
     (nil))
(insn 86 82 87 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:112 <retval> ] [112])) ..\Str\str.cpp:131 83 {*movsi_internal}
     (nil))
(insn 87 86 93 10 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:131 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 93 87 0 NOTE_INSN_DELETED)

;; Function Str& Str::operator=(const Str&) (_ZN3StraSERKS_, funcdef_no=1028, decl_uid=20895, cgraph_uid=205, symbol_order=206)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 47:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 48:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 62:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 75: point = 0
   Insn 74: point = 0
   Insn 70: point = 1
   Insn 67: point = 3
   Insn 66: point = 4
   Insn 65: point = 5
   Insn 64: point = 6
   Insn 63: point = 8
   Insn 62: point = 9
   Insn 61: point = 10
   Insn 60: point = 12
   Insn 59: point = 14
   Insn 58: point = 16
   Insn 57: point = 17
   Insn 56: point = 19
  BB 6
   Insn 36: point = 20
   Insn 35: point = 20
   Insn 34: point = 21
   Insn 33: point = 23
  BB 7
   Insn 77: point = 24
   Insn 48: point = 24
   Insn 47: point = 24
   Insn 46: point = 25
   Insn 45: point = 27
   Insn 44: point = 29
   Insn 43: point = 30
   Insn 42: point = 32
   Insn 41: point = 33
   Insn 40: point = 35
   Insn 39: point = 36
   Insn 38: point = 38
  BB 5
   Insn 31: point = 39
   Insn 30: point = 39
   Insn 29: point = 40
   Insn 28: point = 41
   Insn 27: point = 43
   Insn 26: point = 44
   Insn 25: point = 44
   Insn 24: point = 45
   Insn 23: point = 47
   Insn 22: point = 49
   Insn 21: point = 51
  BB 4
   Insn 18: point = 52
   Insn 17: point = 52
   Insn 16: point = 53
   Insn 15: point = 55
  BB 3
   Insn 13: point = 56
   Insn 12: point = 56
   Insn 11: point = 57
   Insn 10: point = 59
  BB 2
   Insn 8: point = 60
   Insn 7: point = 60
   Insn 6: point = 61
   Insn 2: point = 62
 r87: [56..57]
 r88: [52..53]
 r89: [48..49]
 r90: [46..47]
 r91: [44..45]
 r92: [39..41]
 r93: [20..21]
 r94: [34..36]
 r95: [34..35]
 r96: [24..33]
 r97: [28..30]
 r98: [28..29]
 r99: [26..27]
 r100: [24..25]
 r101: [11..17]
 r102: [13..14]
 r103: [11..12]
 r104: [9..10]
 r105: [4..6]
 r106: [2..3]
 r107: [0..1]
 r108: [60..61]
 r109: [58..59]
 r110: [54..55]
 r111: [50..51]
 r112: [42..43]
 r113: [39..40]
 r114: [22..23]
 r115: [37..38]
 r116: [31..32]
 r117: [18..19]
 r118: [15..16]
 r119: [7..8]
 r120: [4..5]
Compressing live ranges: from 62 to 56 - 90%
Ranges after the compression:
 r87: [50..51]
 r88: [46..47]
 r89: [42..43]
 r90: [40..41]
 r91: [38..39]
 r92: [34..35]
 r93: [18..19]
 r94: [30..31]
 r95: [30..31]
 r96: [22..29]
 r97: [26..27]
 r98: [26..27]
 r99: [24..25]
 r100: [22..23]
 r101: [10..15]
 r102: [12..13]
 r103: [10..11]
 r104: [8..9]
 r105: [4..5]
 r106: [2..3]
 r107: [0..1]
 r108: [54..55]
 r109: [52..53]
 r110: [48..49]
 r111: [44..45]
 r112: [36..37]
 r113: [34..35]
 r114: [20..21]
 r115: [32..33]
 r116: [28..29]
 r117: [16..17]
 r118: [14..15]
 r119: [6..7]
 r120: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 47
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 70
changing reg in insn 74
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 26.


Str& Str::operator=(const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={32d,31u} r1={8d,5u} r2={4d,2u} r6={1d,29u} r7={1d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={10d,3u} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 282{197d,85u,0e} in 54{52 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:133 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:134 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [108])
            (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 right+0 S4 A32]))) ..\Str\str.cpp:134 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) ..\Str\str.cpp:134 509 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       3 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 109
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:136 83 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 0 ax [orig:87 D.21534 ] [87])
        (mem/f/j:SI (reg/f:SI 0 ax [109]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:136 83 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:87 D.21534 ] [87])
            (const_int 0 [0]))) ..\Str\str.cpp:136 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) ..\Str\str.cpp:136 509 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 110
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:136 83 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg/f:SI 0 ax [orig:88 D.21534 ] [88])
        (mem/f/j:SI (reg/f:SI 0 ax [110]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:136 83 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.21534 ] [88])) ..\Str\str.cpp:136 83 {*movsi_internal}
     (nil))
(call_insn 18 17 19 4 (call (mem:QI (symbol_ref:SI ("_ZdaPv") [flags 0x43]  <function_decl 041e2680 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 4 [0x4])) ..\Str\str.cpp:136 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 111 112 113
(code_label 19 18 20 5 60 "" [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:137 83 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (reg:SI 0 ax [orig:89 D.21535 ] [89])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 4 [0x4])) [0 right_6(D)->size+0 S4 A32])) ..\Str\str.cpp:137 83 {*movsi_internal}
     (nil))
(insn 23 22 24 5 (parallel [
            (set (reg:SI 0 ax [orig:90 D.21535 ] [90])
                (plus:SI (reg:SI 0 ax [orig:89 D.21535 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:137 194 {*addsi_1}
     (nil))
(insn 24 23 25 5 (set (reg:SI 0 ax [orig:91 D.21536 ] [91])
        (reg:SI 0 ax [orig:90 D.21535 ] [90])) ..\Str\str.cpp:137 83 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:91 D.21536 ] [91])) ..\Str\str.cpp:137 83 {*movsi_internal}
     (nil))
(call_insn 26 25 27 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znaj") [flags 0x43]  <function_decl 041e2580 operator new []>) [0 operator new [] S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:137 565 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 27 26 28 5 (set (reg/f:SI 0 ax [112])
        (reg:SI 0 ax)) ..\Str\str.cpp:137 83 {*movsi_internal}
     (expr_list:REG_NOALIAS (reg/f:SI 0 ax [112])
        (nil)))
(insn 28 27 29 5 (set (reg/f:SI 1 dx [orig:92 D.21537 ] [92])
        (reg/f:SI 0 ax [112])) ..\Str\str.cpp:137 83 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:137 83 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (mem/f/j:SI (reg/f:SI 0 ax [113]) [0 this_5(D)->source+0 S4 A32])
        (reg/f:SI 1 dx [orig:92 D.21537 ] [92])) ..\Str\str.cpp:137 83 {*movsi_internal}
     (nil))
(insn 31 30 49 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:138 83 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100,0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 114
(code_label 49 31 32 6 62 "" [1 uses])
(note 32 49 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:138 83 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:SI 0 ax [orig:93 D.21535 ] [93])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 4 [0x4])) [0 right_6(D)->size+0 S4 A32])) ..\Str\str.cpp:138 83 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:93 D.21535 ] [93])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) ..\Str\str.cpp:138 7 {*cmpsi_1}
     (nil))
(jump_insn 36 35 37 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 54)
            (pc))) ..\Str\str.cpp:138 509 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 97 98 99 100 115 116
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 7 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:139 83 {*movsi_internal}
     (nil))
(insn 39 38 40 7 (set (reg/f:SI 1 dx [orig:94 D.21534 ] [94])
        (mem/f/j:SI (reg/f:SI 0 ax [115]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:139 83 {*movsi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:SI 0 ax [orig:95 D.21538 ] [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:139 83 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (parallel [
            (set (reg/f:SI 1 dx [orig:96 D.21534 ] [96])
                (plus:SI (reg/f:SI 1 dx [orig:94 D.21534 ] [94])
                    (reg:SI 0 ax [orig:95 D.21538 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:139 194 {*addsi_1}
     (nil))
(insn 42 41 43 7 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:139 83 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg/f:SI 2 cx [orig:97 D.21534 ] [97])
        (mem/f/j:SI (reg/f:SI 0 ax [116]) [0 right_6(D)->source+0 S4 A32])) ..\Str\str.cpp:139 83 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:SI 0 ax [orig:98 D.21538 ] [98])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:139 83 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (parallel [
            (set (reg/f:SI 0 ax [orig:99 D.21534 ] [99])
                (plus:SI (reg:SI 0 ax [orig:98 D.21538 ] [98])
                    (reg/f:SI 2 cx [orig:97 D.21534 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:139 194 {*addsi_1}
     (nil))
(insn 46 45 47 7 (set (reg:QI 0 ax [orig:100 D.21539 ] [100])
        (mem:QI (reg/f:SI 0 ax [orig:99 D.21534 ] [99]) [0 *_25+0 S1 A8])) ..\Str\str.cpp:139 86 {*movqi_internal}
     (nil))
(insn 47 46 48 7 (set (mem:QI (reg/f:SI 1 dx [orig:96 D.21534 ] [96]) [0 *_22+0 S1 A8])
        (reg:QI 0 ax [orig:100 D.21539 ] [100])) ..\Str\str.cpp:139 86 {*movqi_internal}
     (nil))
(insn 48 47 77 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:138 194 {*addsi_1}
     (nil))
(jump_insn 77 48 78 7 (set (pc)
        (label_ref 49)) ..\Str\str.cpp:138 551 {jump}
     (nil)
 -> 49)
;;  succ:       6 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 78 77 54)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 101 102 103 104 105 106 107 117 118 119 120
(code_label 54 78 55 8 59 "" [2 uses])
(note 55 54 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 8 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:141 83 {*movsi_internal}
     (nil))
(insn 57 56 58 8 (set (reg/f:SI 1 dx [orig:101 D.21534 ] [101])
        (mem/f/j:SI (reg/f:SI 0 ax [117]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:141 83 {*movsi_internal}
     (nil))
(insn 58 57 59 8 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:141 83 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (reg:SI 0 ax [orig:102 D.21535 ] [102])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [118])
                (const_int 4 [0x4])) [0 right_6(D)->size+0 S4 A32])) ..\Str\str.cpp:141 83 {*movsi_internal}
     (nil))
(insn 60 59 61 8 (set (reg:SI 0 ax [orig:103 D.21538 ] [103])
        (reg:SI 0 ax [orig:102 D.21535 ] [102])) ..\Str\str.cpp:141 83 {*movsi_internal}
     (nil))
(insn 61 60 62 8 (parallel [
            (set (reg/f:SI 0 ax [orig:104 D.21534 ] [104])
                (plus:SI (reg:SI 0 ax [orig:103 D.21538 ] [103])
                    (reg/f:SI 1 dx [orig:101 D.21534 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:141 194 {*addsi_1}
     (nil))
(insn 62 61 63 8 (set (mem:QI (reg/f:SI 0 ax [orig:104 D.21534 ] [104]) [0 *_32+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:141 86 {*movqi_internal}
     (nil))
(insn 63 62 64 8 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 right+0 S4 A32])) ..\Str\str.cpp:142 83 {*movsi_internal}
     (nil))
(insn 64 63 65 8 (set (reg:SI 1 dx [orig:105 D.21535 ] [105])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [119])
                (const_int 4 [0x4])) [0 right_6(D)->size+0 S4 A32])) ..\Str\str.cpp:142 83 {*movsi_internal}
     (nil))
(insn 65 64 66 8 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:142 83 {*movsi_internal}
     (nil))
(insn 66 65 67 8 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [120])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])
        (reg:SI 1 dx [orig:105 D.21535 ] [105])) ..\Str\str.cpp:142 83 {*movsi_internal}
     (nil))
(insn 67 66 70 8 (set (reg/f:SI 0 ax [orig:106 D.21540 ] [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:143 83 {*movsi_internal}
     (nil))
(insn 70 67 74 8 (set (reg:SI 0 ax [orig:107 <retval> ] [107])
        (reg/f:SI 0 ax [orig:106 D.21540 ] [106])) ..\Str\str.cpp:143 83 {*movsi_internal}
     (nil))
(insn 74 70 75 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:107 <retval> ] [107])) ..\Str\str.cpp:144 83 {*movsi_internal}
     (nil))
(insn 75 74 79 8 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:144 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 79 75 0 NOTE_INSN_DELETED)

;; Function Str operator+(const Str&, const Str&) (_ZplRK3StrS1_, funcdef_no=1029, decl_uid=20902, cgraph_uid=206, symbol_order=207)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) lmBz  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) lmBz  (3) i {*call_value_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) lBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 1
   Insn 23: point = 3
   Insn 22: point = 3
   Insn 34: point = 3
  BB 5
   Insn 30: point = 4
   Insn 29: point = 4
  BB 3
   Insn 37: point = 4
   Insn 14: point = 4
  BB 2
   Insn 13: point = 4
   Insn 12: point = 4
   Insn 11: point = 4
   Insn 10: point = 5
   Insn 9: point = 6
   Insn 8: point = 6
   Insn 7: point = 6
   Insn 6: point = 6
   Insn 5: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 24
changing reg in insn 25
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 34
changing reg in insn 24
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 26.


Str operator+(const Str&, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 3[bx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={10d,6u} r1={6d} r2={8d,3u} r3={1d,1u} r6={1d,11u} r7={5d,23u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1u} r17={6d} r18={4d} r19={4d} r20={1d,2u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 365{318d,47u,0e} in 19{15 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 left+0 S4 A32])) ..\Str\str.cpp:147 83 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [88])) ..\Str\str.cpp:147 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 cx)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) ..\Str\str.cpp:147 83 {*movsi_internal}
     (nil))
(call_insn 8 7 9 2 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZN3StrC1ERKS_") [flags 0x3]  <function_decl 04e59e00 __comp_ctor >) [0 __comp_ctor  S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) ..\Str\str.cpp:147 562 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:147 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 right+0 S4 A32])) ..\Str\str.cpp:148 83 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [89])) ..\Str\str.cpp:148 83 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 2 cx)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) ..\Str\str.cpp:148 83 {*movsi_internal}
     (nil))
(call_insn 13 12 32 2 (parallel [
            (set (reg:SI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZN3StrpLERKS_") [flags 0x3]  <function_decl 04e59700 operator+=>) [0 operator+= S1 A8])
                    (const_int 4 [0x4])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) ..\Str\str.cpp:148 571 {*call_value_pop}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
;;  succ:       4 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 7 [sp] 17 [flags]
(note 32 13 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 32 37 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:148 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 37 14 38 3 (set (pc)
        (label_ref 36)) ..\Str\str.cpp:149 551 {jump}
     (nil)
 -> 36)
;;  succ:       5 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 38 37 33)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 4 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 90
(code_label/s 33 38 35 4 67 "" [1 uses])
(note 35 33 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 35 22 4 (set (reg:SI 3 bx [90])
        (reg:SI 0 ax)) 83 {*movsi_internal}
     (nil))
(insn 22 34 23 4 (set (reg:SI 2 cx)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) 83 {*movsi_internal}
     (nil))
(call_insn 23 22 24 4 (call (mem:QI (symbol_ref:SI ("_ZN3StrD1Ev") [flags 0x3]  <function_decl 04e5f100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(insn 24 23 25 4 (set (reg/f:SI 0 ax [orig:87 D.21541 ] [87])
        (reg:SI 3 bx [90])) 83 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:87 D.21541 ] [87])) 83 {*movsi_internal}
     (nil))
(call_insn 26 25 27 4 (call (mem:QI (symbol_ref:SI ("_Unwind_Resume") [flags 0x43]  <function_decl 041dff00 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 4 [0x4])) 556 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 27 26 36)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100,0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 36 27 31 5 68 "" [1 uses])
(note 31 36 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 31 30 5 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) ..\Str\str.cpp:150 83 {*movsi_internal}
     (nil))
(insn 30 29 39 5 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:150 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 39 30 0 NOTE_INSN_DELETED)

;; Function Str operator+(char, const Str&) (_ZplcRK3Str, funcdef_no=1030, decl_uid=21066, cgraph_uid=207, symbol_order=208)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 3:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) qm {extendqisi2}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) lmBz  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) lBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) lBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) lBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 36: point = 0
   Insn 35: point = 0
   Insn 34: point = 1
   Insn 33: point = 3
   Insn 32: point = 3
   Insn 31: point = 4
   Insn 43: point = 5
  BB 5
   Insn 40: point = 6
   Insn 39: point = 6
  BB 3
   Insn 47: point = 6
   Insn 24: point = 6
   Insn 23: point = 6
   Insn 22: point = 7
   Insn 45: point = 8
  BB 2
   Insn 19: point = 8
   Insn 18: point = 8
   Insn 17: point = 9
   Insn 16: point = 10
   Insn 15: point = 11
   Insn 14: point = 12
   Insn 13: point = 13
   Insn 12: point = 14
   Insn 11: point = 14
   Insn 10: point = 14
   Insn 9: point = 15
   Insn 8: point = 16
   Insn 7: point = 17
   Insn 3: point = 18
   Insn 2: point = 19
Compressing live ranges: from 20 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 34
changing reg in insn 35
changing reg in insn 7
changing reg in insn 9
changing reg in insn 13
changing reg in insn 17
changing reg in insn 2
changing reg in insn 8
changing reg in insn 10
changing reg in insn 14
changing reg in insn 18
changing reg in insn 15
changing reg in insn 16
changing reg in insn 22
changing reg in insn 23
changing reg in insn 31
changing reg in insn 32
changing reg in insn 43
changing reg in insn 34
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 36.


Str operator+(char, const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={14d,9u} r1={9d,2u} r2={10d,4u} r3={1d,1u} r6={1d,15u} r7={3d,24u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1u} r17={10d} r18={5d} r19={5d} r20={1d,2u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 457{399d,58u,0e} in 29{24 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 left+0 S4 A32])) ..\Str\str.cpp:152 83 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 left+0 S1 A32])
        (reg:QI 0 ax [90])) ..\Str\str.cpp:152 86 {*movqi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 dx [orig:88 D.21544 ] [88])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 left+0 S1 A32]))) ..\Str\str.cpp:153 131 {extendqisi2}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:SI 0 ax [91])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:153 194 {*addsi_1}
     (nil))
(insn 9 8 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 1 dx [orig:88 D.21544 ] [88])) ..\Str\str.cpp:153 83 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 2 cx)
        (reg:SI 0 ax [91])) ..\Str\str.cpp:153 83 {*movsi_internal}
     (nil))
(call_insn 11 10 12 2 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZN3StrC1Ec") [flags 0x3]  <function_decl 04e59f00 __comp_ctor >) [0 __comp_ctor  S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) ..\Str\str.cpp:153 562 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:153 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 13 12 14 2 (set (reg:SI 1 dx [orig:89 D.21544 ] [89])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 left+0 S1 A32]))) ..\Str\str.cpp:154 131 {extendqisi2}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) ..\Str\str.cpp:154 83 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 2 cx [93])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:154 194 {*addsi_1}
     (nil))
(insn 16 15 17 2 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 2 cx [93])) ..\Str\str.cpp:154 83 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 1 dx [orig:89 D.21544 ] [89])) ..\Str\str.cpp:154 83 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [92])) ..\Str\str.cpp:154 83 {*movsi_internal}
     (nil))
(call_insn 19 18 20 2 (call (mem:QI (symbol_ref:SI ("_ZplcRK3Str") [flags 0x3]  <function_decl 04e5f900 operator+>) [0 operator+ S1 A8])
        (const_int 12 [0xc])) ..\Str\str.cpp:154 556 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (nil)))))
;;  succ:       4 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94
(note 20 19 45 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 45 20 22 3 (const_int 0 [0]) ..\Str\str.cpp:154 581 {nop}
     (nil))
(insn 22 45 23 3 (parallel [
            (set (reg:SI 0 ax [94])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:153 194 {*addsi_1}
     (nil))
(insn 23 22 24 3 (set (reg:SI 2 cx)
        (reg:SI 0 ax [94])) ..\Str\str.cpp:153 83 {*movsi_internal}
     (nil))
(call_insn 24 23 47 3 (call (mem:QI (symbol_ref:SI ("_ZN3StrD1Ev") [flags 0x3]  <function_decl 04e5f100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:153 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(jump_insn 47 24 48 3 (set (pc)
        (label_ref 46)) ..\Str\str.cpp:154 551 {jump}
     (nil)
 -> 46)
;;  succ:       5 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 42)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 4 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 95 96
(code_label/s 42 48 44 4 72 "" [1 uses])
(note 44 42 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 44 31 4 (set (reg:SI 3 bx [96])
        (reg:SI 0 ax)) 83 {*movsi_internal}
     (nil))
(insn 31 43 32 4 (parallel [
            (set (reg:SI 0 ax [95])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:153 194 {*addsi_1}
     (nil))
(insn 32 31 33 4 (set (reg:SI 2 cx)
        (reg:SI 0 ax [95])) ..\Str\str.cpp:153 83 {*movsi_internal}
     (nil))
(call_insn 33 32 34 4 (call (mem:QI (symbol_ref:SI ("_ZN3StrD1Ev") [flags 0x3]  <function_decl 04e5f100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:153 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(insn 34 33 35 4 (set (reg/f:SI 0 ax [orig:87 D.21543 ] [87])
        (reg:SI 3 bx [96])) 83 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:87 D.21543 ] [87])) 83 {*movsi_internal}
     (nil))
(call_insn 36 35 37 4 (call (mem:QI (symbol_ref:SI ("_Unwind_Resume") [flags 0x43]  <function_decl 041dff00 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 4 [0x4])) 556 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 37 36 46)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100,0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 46 37 41 5 73 "" [1 uses])
(note 41 46 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 41 40 5 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) ..\Str\str.cpp:155 83 {*movsi_internal}
     (nil))
(insn 40 39 49 5 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:155 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 49 40 0 NOTE_INSN_DELETED)

;; Function Str operator+(const Str&, char) (_ZplRK3Strc, funcdef_no=1031, decl_uid=20905, cgraph_uid=208, symbol_order=209)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 3:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) qm {extendqisi2}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) lmBz  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 14:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) lBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) lBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) lBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 36: point = 0
   Insn 35: point = 0
   Insn 34: point = 1
   Insn 33: point = 3
   Insn 32: point = 3
   Insn 31: point = 4
   Insn 43: point = 5
  BB 5
   Insn 40: point = 6
   Insn 39: point = 6
  BB 3
   Insn 47: point = 6
   Insn 24: point = 6
   Insn 23: point = 6
   Insn 22: point = 7
   Insn 45: point = 8
  BB 2
   Insn 19: point = 8
   Insn 18: point = 8
   Insn 17: point = 9
   Insn 16: point = 10
   Insn 15: point = 11
   Insn 14: point = 12
   Insn 13: point = 13
   Insn 12: point = 14
   Insn 11: point = 14
   Insn 10: point = 14
   Insn 9: point = 15
   Insn 8: point = 16
   Insn 7: point = 17
   Insn 3: point = 18
   Insn 2: point = 19
Compressing live ranges: from 20 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 34
changing reg in insn 35
changing reg in insn 7
changing reg in insn 9
changing reg in insn 2
changing reg in insn 8
changing reg in insn 10
changing reg in insn 13
changing reg in insn 18
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 31
changing reg in insn 32
changing reg in insn 43
changing reg in insn 34
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 36.


Str operator+(const Str&, char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={14d,9u} r1={10d,3u} r2={9d,3u} r3={1d,1u} r6={1d,15u} r7={3d,24u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1u} r17={10d} r18={5d} r19={5d} r20={1d,2u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 457{399d,58u,0e} in 29{24 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 right+0 S4 A32])) ..\Str\str.cpp:157 83 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 right+0 S1 A32])
        (reg:QI 0 ax [89])) ..\Str\str.cpp:157 86 {*movqi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 dx [orig:88 D.21548 ] [88])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 right+0 S1 A32]))) ..\Str\str.cpp:158 131 {extendqisi2}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:SI 0 ax [90])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:158 194 {*addsi_1}
     (nil))
(insn 9 8 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 1 dx [orig:88 D.21548 ] [88])) ..\Str\str.cpp:158 83 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 2 cx)
        (reg:SI 0 ax [90])) ..\Str\str.cpp:158 83 {*movsi_internal}
     (nil))
(call_insn 11 10 12 2 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZN3StrC1Ec") [flags 0x3]  <function_decl 04e59f00 __comp_ctor >) [0 __comp_ctor  S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) ..\Str\str.cpp:158 562 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:158 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 13 12 14 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) ..\Str\str.cpp:159 83 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 1 dx [92])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:159 194 {*addsi_1}
     (nil))
(insn 15 14 16 2 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 1 dx [92])) ..\Str\str.cpp:159 83 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 1 dx [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 left+0 S4 A32])) ..\Str\str.cpp:159 83 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 1 dx [93])) ..\Str\str.cpp:159 83 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [91])) ..\Str\str.cpp:159 83 {*movsi_internal}
     (nil))
(call_insn 19 18 20 2 (call (mem:QI (symbol_ref:SI ("_ZplRK3StrS1_") [flags 0x3]  <function_decl 04e59600 operator+>) [0 operator+ S1 A8])
        (const_int 12 [0xc])) ..\Str\str.cpp:159 556 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (nil)))))
;;  succ:       4 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94
(note 20 19 45 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 45 20 22 3 (const_int 0 [0]) ..\Str\str.cpp:159 581 {nop}
     (nil))
(insn 22 45 23 3 (parallel [
            (set (reg:SI 0 ax [94])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:158 194 {*addsi_1}
     (nil))
(insn 23 22 24 3 (set (reg:SI 2 cx)
        (reg:SI 0 ax [94])) ..\Str\str.cpp:158 83 {*movsi_internal}
     (nil))
(call_insn 24 23 47 3 (call (mem:QI (symbol_ref:SI ("_ZN3StrD1Ev") [flags 0x3]  <function_decl 04e5f100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:158 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(jump_insn 47 24 48 3 (set (pc)
        (label_ref 46)) ..\Str\str.cpp:159 551 {jump}
     (nil)
 -> 46)
;;  succ:       5 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 42)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 4 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 95 96
(code_label/s 42 48 44 4 77 "" [1 uses])
(note 44 42 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 44 31 4 (set (reg:SI 3 bx [96])
        (reg:SI 0 ax)) 83 {*movsi_internal}
     (nil))
(insn 31 43 32 4 (parallel [
            (set (reg:SI 0 ax [95])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:158 194 {*addsi_1}
     (nil))
(insn 32 31 33 4 (set (reg:SI 2 cx)
        (reg:SI 0 ax [95])) ..\Str\str.cpp:158 83 {*movsi_internal}
     (nil))
(call_insn 33 32 34 4 (call (mem:QI (symbol_ref:SI ("_ZN3StrD1Ev") [flags 0x3]  <function_decl 04e5f100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:158 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(insn 34 33 35 4 (set (reg/f:SI 0 ax [orig:87 D.21547 ] [87])
        (reg:SI 3 bx [96])) 83 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:87 D.21547 ] [87])) 83 {*movsi_internal}
     (nil))
(call_insn 36 35 37 4 (call (mem:QI (symbol_ref:SI ("_Unwind_Resume") [flags 0x43]  <function_decl 041dff00 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 4 [0x4])) 556 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 37 36 46)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100,0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 46 37 41 5 78 "" [1 uses])
(note 41 46 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 41 40 5 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 .result_ptr+0 S4 A32])) ..\Str\str.cpp:160 83 {*movsi_internal}
     (nil))
(insn 40 39 49 5 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:160 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 49 40 0 NOTE_INSN_DELETED)

;; Function Str::Str(char*) (_ZN3StrC2EPc, funcdef_no=1033, decl_uid=20958, cgraph_uid=210, symbol_order=211)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 13
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 20:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 51
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 54:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 55:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 66
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 67:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 70: point = 0
   Insn 67: point = 0
   Insn 66: point = 1
   Insn 65: point = 3
   Insn 64: point = 5
   Insn 63: point = 7
   Insn 62: point = 8
   Insn 61: point = 10
  BB 6
   Insn 43: point = 11
   Insn 42: point = 11
   Insn 41: point = 12
   Insn 40: point = 14
  BB 7
   Insn 73: point = 15
   Insn 55: point = 15
   Insn 54: point = 15
   Insn 53: point = 16
   Insn 52: point = 18
   Insn 51: point = 20
   Insn 50: point = 22
   Insn 49: point = 23
   Insn 48: point = 24
   Insn 47: point = 26
   Insn 46: point = 27
   Insn 45: point = 29
  BB 5
   Insn 38: point = 30
   Insn 37: point = 30
   Insn 36: point = 31
   Insn 35: point = 32
   Insn 34: point = 34
   Insn 33: point = 35
   Insn 32: point = 35
   Insn 31: point = 36
   Insn 30: point = 38
   Insn 29: point = 40
   Insn 28: point = 42
  BB 3
   Insn 16: point = 43
   Insn 15: point = 43
   Insn 14: point = 44
   Insn 13: point = 46
   Insn 12: point = 48
   Insn 11: point = 49
   Insn 10: point = 51
   Insn 9: point = 53
  BB 4
   Insn 71: point = 54
   Insn 22: point = 54
   Insn 21: point = 55
   Insn 20: point = 56
   Insn 19: point = 58
   Insn 18: point = 60
  BB 2
   Insn 7: point = 61
   Insn 6: point = 62
   Insn 2: point = 63
 r87: [50..51]
 r88: [47..49]
 r89: [45..46]
 r90: [43..44]
 r91: [57..58]
 r92: [54..56]
 r93: [39..40]
 r94: [37..38]
 r95: [35..36]
 r96: [30..32]
 r97: [11..12]
 r98: [25..27]
 r99: [25..26]
 r100: [15..24]
 r101: [21..23]
 r102: [19..20]
 r103: [17..18]
 r104: [15..16]
 r105: [2..8]
 r106: [4..5]
 r107: [2..3]
 r108: [0..1]
 r109: [61..62]
 r110: [52..53]
 r111: [47..48]
 r112: [59..60]
 r113: [54..55]
 r114: [41..42]
 r115: [33..34]
 r116: [30..31]
 r117: [13..14]
 r118: [28..29]
 r119: [21..22]
 r120: [9..10]
 r121: [6..7]
Compressing live ranges: from 63 to 56 - 88%
Ranges after the compression:
 r87: [44..45]
 r88: [42..43]
 r89: [40..41]
 r90: [38..39]
 r91: [50..51]
 r92: [48..49]
 r93: [34..35]
 r94: [32..33]
 r95: [30..31]
 r96: [26..27]
 r97: [10..11]
 r98: [22..23]
 r99: [22..23]
 r100: [14..21]
 r101: [20..21]
 r102: [18..19]
 r103: [16..17]
 r104: [14..15]
 r105: [2..7]
 r106: [4..5]
 r107: [2..3]
 r108: [0..1]
 r109: [54..55]
 r110: [46..47]
 r111: [42..43]
 r112: [52..53]
 r113: [48..49]
 r114: [36..37]
 r115: [28..29]
 r116: [26..27]
 r117: [12..13]
 r118: [24..25]
 r119: [20..21]
 r120: [8..9]
 r121: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 35
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 54
changing reg in insn 49
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 29
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
deleting insn with uid = 31.
deleting insn with uid = 34.
deleting insn with uid = 53.
deleting insn with uid = 65.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 33.


Str::Str(char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={24d,23u} r1={10d,8u,1e} r2={3d,2u,1e} r6={1d,27u} r7={1d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={2e} r17={10d,2u} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 198{120d,74u,4e} in 48{47 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 109
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:162 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:163 83 {*movsi_internal}
     (nil))
(insn 7 6 23 2 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:163 83 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100,0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 110 111
(code_label 23 7 8 3 81 "" [1 uses])
(note 8 23 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:SI 0 ax [orig:87 D.21551 ] [87])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [110])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:SI 1 dx [orig:88 D.21552 ] [88])
        (reg:SI 0 ax [orig:87 D.21551 ] [87])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 str+0 S4 A32])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 0 ax [orig:89 D.21553 ] [89])
                (plus:SI (reg/f:SI 0 ax [111])
                    (reg:SI 1 dx [orig:88 D.21552 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:164 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 str+0 S4 A32])
            (reg:SI 1 dx [orig:88 D.21552 ] [88]))
        (nil)))
(insn 14 13 15 3 (set (reg:QI 0 ax [orig:90 D.21554 ] [90])
        (mem:QI (reg/f:SI 0 ax [orig:89 D.21553 ] [89]) [0 *_10+0 S1 A8])) ..\Str\str.cpp:164 86 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 D.21554 ] [90])
            (const_int 0 [0]))) ..\Str\str.cpp:164 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) ..\Str\str.cpp:164 509 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 112 113
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 ax [orig:91 D.21551 ] [91])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:SI 1 dx [orig:92 D.21551 ] [92])
                (plus:SI (reg:SI 0 ax [orig:91 D.21551 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:164 194 {*addsi_1}
     (nil))
(insn 21 20 22 4 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(insn 22 21 71 4 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [113])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])
        (reg:SI 1 dx [orig:92 D.21551 ] [92])) ..\Str\str.cpp:164 83 {*movsi_internal}
     (nil))
(jump_insn 71 22 72 4 (set (pc)
        (label_ref 23)) ..\Str\str.cpp:164 551 {jump}
     (nil)
 -> 23)
;;  succ:       3 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 72 71 26)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 114 115 116
(code_label 26 72 27 5 80 "" [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:165 83 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 ax [orig:93 D.21551 ] [93])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:165 83 {*movsi_internal}
     (nil))
(insn 30 29 32 5 (parallel [
            (set (reg:SI 0 ax [orig:94 D.21551 ] [94])
                (plus:SI (reg:SI 0 ax [orig:93 D.21551 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:165 194 {*addsi_1}
     (nil))
(insn 32 30 33 5 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:95 D.21552 ] [95])) ..\Str\str.cpp:165 83 {*movsi_internal}
     (nil))
(call_insn 33 32 35 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znaj") [flags 0x43]  <function_decl 041e2580 operator new []>) [0 operator new [] S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:165 565 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 35 33 36 5 (set (reg/f:SI 1 dx [orig:96 D.21555 ] [96])
        (reg/f:SI 0 ax [115])) ..\Str\str.cpp:165 83 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:165 83 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (mem/f/j:SI (reg/f:SI 0 ax [116]) [0 this_5(D)->source+0 S4 A32])
        (reg/f:SI 1 dx [orig:96 D.21555 ] [96])) ..\Str\str.cpp:165 83 {*movsi_internal}
     (nil))
(insn 38 37 56 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:166 83 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100,0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 117
(code_label 56 38 39 6 83 "" [1 uses])
(note 39 56 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:166 83 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (set (reg:SI 0 ax [orig:97 D.21551 ] [97])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [117])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:166 83 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:97 D.21551 ] [97])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) ..\Str\str.cpp:166 7 {*cmpsi_1}
     (nil))
(jump_insn 43 42 44 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) ..\Str\str.cpp:166 509 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 101 102 103 104 118 119
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:167 83 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (set (reg/f:SI 1 dx [orig:98 D.21556 ] [98])
        (mem/f/j:SI (reg/f:SI 0 ax [118]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:167 83 {*movsi_internal}
     (nil))
(insn 47 46 48 7 (set (reg:SI 0 ax [orig:99 D.21552 ] [99])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:167 83 {*movsi_internal}
     (nil))
(insn 48 47 49 7 (parallel [
            (set (reg/f:SI 0 ax [orig:100 D.21556 ] [100])
                (plus:SI (reg:SI 0 ax [orig:99 D.21552 ] [99])
                    (reg/f:SI 1 dx [orig:98 D.21556 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:167 194 {*addsi_1}
     (nil))
(insn 49 48 50 7 (set (reg:SI 2 cx [orig:101 D.21552 ] [101])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:167 83 {*movsi_internal}
     (nil))
(insn 50 49 51 7 (set (reg/f:SI 1 dx [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 str+0 S4 A32])) ..\Str\str.cpp:167 83 {*movsi_internal}
     (nil))
(insn 51 50 52 7 (parallel [
            (set (reg/f:SI 1 dx [orig:102 D.21553 ] [102])
                (plus:SI (reg/f:SI 1 dx [119])
                    (reg:SI 2 cx [orig:101 D.21552 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:167 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 str+0 S4 A32])
            (reg:SI 2 cx [orig:101 D.21552 ] [101]))
        (nil)))
(insn 52 51 54 7 (set (reg:QI 1 dx [orig:103 D.21554 ] [103])
        (mem:QI (reg/f:SI 1 dx [orig:102 D.21553 ] [102]) [0 *_28+0 S1 A8])) ..\Str\str.cpp:167 86 {*movqi_internal}
     (nil))
(insn 54 52 55 7 (set (mem:QI (reg/f:SI 0 ax [orig:100 D.21556 ] [100]) [0 *_26+0 S1 A8])
        (reg:QI 1 dx [orig:104 D.21557 ] [104])) ..\Str\str.cpp:167 86 {*movqi_internal}
     (nil))
(insn 55 54 73 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:166 194 {*addsi_1}
     (nil))
(jump_insn 73 55 74 7 (set (pc)
        (label_ref 56)) ..\Str\str.cpp:166 551 {jump}
     (nil)
 -> 56)
;;  succ:       6 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 74 73 59)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 120 121
(code_label 59 74 60 8 82 "" [1 uses])
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 8 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:168 83 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (set (reg/f:SI 1 dx [orig:105 D.21556 ] [105])
        (mem/f/j:SI (reg/f:SI 0 ax [120]) [0 this_5(D)->source+0 S4 A32])) ..\Str\str.cpp:168 83 {*movsi_internal}
     (nil))
(insn 63 62 64 8 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:168 83 {*movsi_internal}
     (nil))
(insn 64 63 66 8 (set (reg:SI 0 ax [orig:106 D.21551 ] [106])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [121])
                (const_int 4 [0x4])) [0 this_5(D)->size+0 S4 A32])) ..\Str\str.cpp:168 83 {*movsi_internal}
     (nil))
(insn 66 64 67 8 (parallel [
            (set (reg/f:SI 0 ax [orig:108 D.21556 ] [108])
                (plus:SI (reg:SI 0 ax [orig:107 D.21552 ] [107])
                    (reg/f:SI 1 dx [orig:105 D.21556 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:168 194 {*addsi_1}
     (nil))
(insn 67 66 70 8 (set (mem:QI (reg/f:SI 0 ax [orig:108 D.21556 ] [108]) [0 *_36+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:168 86 {*movqi_internal}
     (nil))
(insn 70 67 75 8 (const_int 0 [0]) ..\Str\str.cpp:169 581 {nop}
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 75 70 0 NOTE_INSN_DELETED)

;; Function Str::Str(char) (_ZN3StrC2Ec, funcdef_no=1036, decl_uid=20952, cgraph_uid=213, symbol_order=214)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 23:  (0) m  (1) qn {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 26: point = 0
   Insn 23: point = 0
   Insn 22: point = 1
   Insn 21: point = 3
   Insn 20: point = 5
   Insn 19: point = 6
   Insn 18: point = 7
   Insn 17: point = 8
   Insn 16: point = 10
   Insn 15: point = 11
   Insn 14: point = 12
   Insn 13: point = 13
   Insn 12: point = 15
   Insn 11: point = 16
   Insn 10: point = 16
   Insn 9: point = 16
   Insn 8: point = 17
   Insn 4: point = 18
   Insn 3: point = 19
   Insn 2: point = 20
Compressing live ranges: from 20 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 3
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


Str::Str(char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={10d,9u} r1={4d,2u} r2={2d,1u} r6={1d,10u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 119{91d,28u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:171 83 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 str+0 S4 A32])) ..\Str\str.cpp:171 83 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 str+0 S1 A32])
        (reg:QI 0 ax [92])) ..\Str\str.cpp:171 86 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:172 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 4 [0x4])) [0 this_2(D)->size+0 S4 A32])
        (const_int 1 [0x1])) ..\Str\str.cpp:172 83 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 2 [0x2])) ..\Str\str.cpp:173 83 {*movsi_internal}
     (nil))
(call_insn 11 10 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znaj") [flags 0x43]  <function_decl 041e2580 operator new []>) [0 operator new [] S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:173 565 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 13 11 14 2 (set (reg/f:SI 1 dx [orig:87 D.21558 ] [87])
        (reg/f:SI 0 ax [94])) ..\Str\str.cpp:173 83 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:173 83 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/j:SI (reg/f:SI 0 ax [95]) [0 this_2(D)->source+0 S4 A32])
        (reg/f:SI 1 dx [orig:87 D.21558 ] [87])) ..\Str\str.cpp:173 83 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:174 83 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [orig:88 D.21559 ] [88])
        (mem/f/j:SI (reg/f:SI 0 ax [96]) [0 this_2(D)->source+0 S4 A32])) ..\Str\str.cpp:174 83 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:QI 1 dx [orig:89 D.21560 ] [89])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 str+0 S1 A32])) ..\Str\str.cpp:174 86 {*movqi_internal}
     (nil))
(insn 19 18 20 2 (set (mem:QI (reg/f:SI 0 ax [orig:88 D.21559 ] [88]) [0 *_8+0 S1 A8])
        (reg:QI 1 dx [orig:89 D.21560 ] [89])) ..\Str\str.cpp:174 86 {*movqi_internal}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 0 ax [97])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:174 83 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 0 ax [orig:90 D.21559 ] [90])
        (mem/f/j:SI (reg/f:SI 0 ax [97]) [0 this_2(D)->source+0 S4 A32])) ..\Str\str.cpp:174 83 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg/f:SI 0 ax [orig:91 D.21559 ] [91])
                (plus:SI (reg/f:SI 0 ax [orig:90 D.21559 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:174 194 {*addsi_1}
     (nil))
(insn 23 22 26 2 (set (mem:QI (reg/f:SI 0 ax [orig:91 D.21559 ] [91]) [0 *_13+0 S1 A8])
        (const_int 0 [0])) ..\Str\str.cpp:174 86 {*movqi_internal}
     (nil))
(insn 26 23 27 2 (const_int 0 [0]) ..\Str\str.cpp:176 581 {nop}
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 26 0 NOTE_INSN_DELETED)

;; Function Str::Str(const Str&) (_ZN3StrC2ERKS_, funcdef_no=1039, decl_uid=20946, cgraph_uid=216, symbol_order=217)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 32:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 33:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 45: point = 0
   Insn 42: point = 0
   Insn 41: point = 1
   Insn 40: point = 2
   Insn 39: point = 4
  BB 3
   Insn 21: point = 5
   Insn 20: point = 5
   Insn 19: point = 6
   Insn 18: point = 8
  BB 4
   Insn 46: point = 9
   Insn 33: point = 9
   Insn 32: point = 9
   Insn 31: point = 10
   Insn 30: point = 12
   Insn 29: point = 14
   Insn 28: point = 15
   Insn 27: point = 17
   Insn 26: point = 18
   Insn 25: point = 20
   Insn 24: point = 21
   Insn 23: point = 23
  BB 2
   Insn 16: point = 24
   Insn 15: point = 24
   Insn 14: point = 25
   Insn 13: point = 26
   Insn 12: point = 28
   Insn 11: point = 29
   Insn 10: point = 29
   Insn 9: point = 30
   Insn 8: point = 32
   Insn 7: point = 34
   Insn 6: point = 36
   Insn 2: point = 37
 r87: [33..34]
 r88: [31..32]
 r89: [29..30]
 r90: [24..26]
 r91: [5..6]
 r92: [19..21]
 r93: [19..20]
 r94: [9..18]
 r95: [13..15]
 r96: [13..14]
 r97: [11..12]
 r98: [9..10]
 r99: [0..2]
 r100: [35..36]
 r101: [27..28]
 r102: [24..25]
 r103: [7..8]
 r104: [22..23]
 r105: [16..17]
 r106: [3..4]
 r107: [0..1]
Compressing live ranges: from 37 to 32 - 86%
Ranges after the compression:
 r87: [28..29]
 r88: [26..27]
 r89: [24..25]
 r90: [20..21]
 r91: [4..5]
 r92: [16..17]
 r93: [16..17]
 r94: [8..15]
 r95: [12..13]
 r96: [12..13]
 r97: [10..11]
 r98: [8..9]
 r99: [0..1]
 r100: [30..31]
 r101: [22..23]
 r102: [20..21]
 r103: [6..7]
 r104: [18..19]
 r105: [14..15]
 r106: [2..3]
 r107: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 32
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 40
changing reg in insn 42
changing reg in insn 6
changing reg in insn 7
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
deleting insn with uid = 9.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


Str::Str(const Str&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={16d,15u} r1={6d,4u} r2={3d,2u} r6={1d,19u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,1u} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 154{104d,50u,0e} in 31{30 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 100 101 102
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:178 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [100])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 other+0 S4 A32])) ..\Str\str.cpp:179 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [orig:87 D.21561 ] [87])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [100])
                (const_int 4 [0x4])) [0 other_4(D)->size+0 S4 A32])) ..\Str\str.cpp:179 83 {*movsi_internal}
     (nil))
(insn 8 7 10 2 (parallel [
            (set (reg:SI 0 ax [orig:88 D.21561 ] [88])
                (plus:SI (reg:SI 0 ax [orig:87 D.21561 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:179 194 {*addsi_1}
     (nil))
(insn 10 8 11 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:89 D.21562 ] [89])) ..\Str\str.cpp:179 83 {*movsi_internal}
     (nil))
(call_insn 11 10 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znaj") [flags 0x43]  <function_decl 041e2580 operator new []>) [0 operator new [] S1 A8])
            (const_int 4 [0x4]))) ..\Str\str.cpp:179 565 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 13 11 14 2 (set (reg/f:SI 1 dx [orig:90 D.21563 ] [90])
        (reg/f:SI 0 ax [101])) ..\Str\str.cpp:179 83 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:179 83 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/j:SI (reg/f:SI 0 ax [102]) [0 this_11(D)->source+0 S4 A32])
        (reg/f:SI 1 dx [orig:90 D.21563 ] [90])) ..\Str\str.cpp:179 83 {*movsi_internal}
     (nil))
(insn 16 15 34 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:180 83 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100,0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 103
(code_label 34 16 17 3 87 "" [1 uses])
(note 17 34 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 other+0 S4 A32])) ..\Str\str.cpp:180 83 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:91 D.21561 ] [91])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [103])
                (const_int 4 [0x4])) [0 other_4(D)->size+0 S4 A32])) ..\Str\str.cpp:180 83 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:91 D.21561 ] [91])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) ..\Str\str.cpp:180 7 {*cmpsi_1}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) ..\Str\str.cpp:180 509 {*jcc_1}
     (nil)
 -> 37)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 95 96 97 98 104 105
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:181 83 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg/f:SI 1 dx [orig:92 D.21564 ] [92])
        (mem/f/j:SI (reg/f:SI 0 ax [104]) [0 this_11(D)->source+0 S4 A32])) ..\Str\str.cpp:181 83 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [orig:93 D.21565 ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:181 83 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg/f:SI 1 dx [orig:94 D.21564 ] [94])
                (plus:SI (reg/f:SI 1 dx [orig:92 D.21564 ] [92])
                    (reg:SI 0 ax [orig:93 D.21565 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:181 194 {*addsi_1}
     (nil))
(insn 27 26 28 4 (set (reg/f:SI 0 ax [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 other+0 S4 A32])) ..\Str\str.cpp:181 83 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 2 cx [orig:95 D.21564 ] [95])
        (mem/f/j:SI (reg/f:SI 0 ax [105]) [0 other_4(D)->source+0 S4 A32])) ..\Str\str.cpp:181 83 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:SI 0 ax [orig:96 D.21565 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ..\Str\str.cpp:181 83 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg/f:SI 0 ax [orig:97 D.21564 ] [97])
                (plus:SI (reg:SI 0 ax [orig:96 D.21565 ] [96])
                    (reg/f:SI 2 cx [orig:95 D.21564 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:181 194 {*addsi_1}
     (nil))
(insn 31 30 32 4 (set (reg:QI 0 ax [orig:98 D.21566 ] [98])
        (mem:QI (reg/f:SI 0 ax [orig:97 D.21564 ] [97]) [0 *_20+0 S1 A8])) ..\Str\str.cpp:181 86 {*movqi_internal}
     (nil))
(insn 32 31 33 4 (set (mem:QI (reg/f:SI 1 dx [orig:94 D.21564 ] [94]) [0 *_17+0 S1 A8])
        (reg:QI 0 ax [orig:98 D.21566 ] [98])) ..\Str\str.cpp:181 86 {*movqi_internal}
     (nil))
(insn 33 32 46 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ..\Str\str.cpp:180 194 {*addsi_1}
     (nil))
(jump_insn 46 33 47 4 (set (pc)
        (label_ref 34)) ..\Str\str.cpp:180 551 {jump}
     (nil)
 -> 34)
;;  succ:       3 [100,0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 47 46 37)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 99 106 107
(code_label 37 47 38 5 86 "" [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 other+0 S4 A32])) ..\Str\str.cpp:182 83 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:SI 1 dx [orig:99 D.21561 ] [99])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [106])
                (const_int 4 [0x4])) [0 other_4(D)->size+0 S4 A32])) ..\Str\str.cpp:182 83 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 this+0 S4 A32])) ..\Str\str.cpp:182 83 {*movsi_internal}
     (nil))
(insn 42 41 45 5 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [107])
                (const_int 4 [0x4])) [0 this_11(D)->size+0 S4 A32])
        (reg:SI 1 dx [orig:99 D.21561 ] [99])) ..\Str\str.cpp:182 83 {*movsi_internal}
     (nil))
(insn 45 42 48 5 (const_int 0 [0]) ..\Str\str.cpp:183 581 {nop}
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 48 45 0 NOTE_INSN_DELETED)

;; Function Str::Str() (_ZN3StrC2Ev, funcdef_no=1042, decl_uid=20941, cgraph_uid=219, symbol_order=220)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0
   Insn 9: point = 0
   Insn 8: point = 1
   Insn 7: point = 2
   Insn 6: point = 3
   Insn 2: point = 4
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns


Str::Str()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 6[bp]
;;  ref usage 	r0={3d,2u} r1={1d} r2={1d,1u} r6={1d,5u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 19{8d,11u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:185 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])) ..\Str\str.cpp:186 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/j:SI (reg/f:SI 0 ax [87]) [0 this_2(D)->source+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:186 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])) ..\Str\str.cpp:187 83 {*movsi_internal}
     (nil))
(insn 9 8 12 2 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [88])
                (const_int 4 [0x4])) [0 this_2(D)->size+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:187 83 {*movsi_internal}
     (nil))
(insn 12 9 13 2 (const_int 0 [0]) ..\Str\str.cpp:188 581 {nop}
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 13 12 0 NOTE_INSN_DELETED)

;; Function Str::~Str() (_ZN3StrD2Ev, funcdef_no=1045, decl_uid=20964, cgraph_uid=222, symbol_order=223)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) lBwBz {*call}

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 23: point = 0
  BB 3
   Insn 14: point = 0
   Insn 13: point = 0
   Insn 12: point = 1
   Insn 11: point = 3
  BB 2
   Insn 9: point = 4
   Insn 8: point = 4
   Insn 7: point = 5
   Insn 6: point = 7
   Insn 2: point = 8
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


Str::~Str()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={6d,4u} r1={2d} r2={2d,1u} r6={1d,8u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 108{85d,23u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:190 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:191 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [orig:87 D.21567 ] [87])
        (mem/f/j:SI (reg/f:SI 0 ax [89]) [0 this_3(D)->source+0 S4 A32])) ..\Str\str.cpp:191 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:87 D.21567 ] [87])
            (const_int 0 [0]))) ..\Str\str.cpp:191 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 22)
            (pc))) ..\Str\str.cpp:191 509 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 90
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:191 83 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 0 ax [orig:88 D.21567 ] [88])
        (mem/f/j:SI (reg/f:SI 0 ax [90]) [0 this_3(D)->source+0 S4 A32])) ..\Str\str.cpp:191 83 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.21567 ] [88])) ..\Str\str.cpp:191 83 {*movsi_internal}
     (nil))
(call_insn 14 13 22 3 (call (mem:QI (symbol_ref:SI ("_ZdaPv") [flags 0x43]  <function_decl 041e2680 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 4 [0x4])) ..\Str\str.cpp:191 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       5 [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (NEW, RTL, MODIFIED)
;;  pred:       2
;;              3 [100,0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 22 14 21 5 91 "" [1 uses])
(note 21 22 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 21 17 5 (const_int 0 [0]) ..\Str\str.cpp:192 581 {nop}
     (nil))
;;  succ:       4 [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100,0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 17 23 18 4 89 "" [0 uses])
(note 18 17 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 18 0 NOTE_INSN_DELETED)

;; Function char* Str::getStr() (_ZN3Str6getStrEv, funcdef_no=1047, decl_uid=20935, cgraph_uid=224, symbol_order=225)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0
   Insn 14: point = 0
   Insn 10: point = 1
   Insn 7: point = 3
   Insn 6: point = 5
   Insn 2: point = 6
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns


char* Str::getStr()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 6[bp]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 23{10d,13u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:194 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])) ..\Str\str.cpp:195 83 {*movsi_internal}
     (nil))
(insn 7 6 10 2 (set (reg/f:SI 0 ax [orig:87 D.21568 ] [87])
        (mem/f/j:SI (reg/f:SI 0 ax [89]) [0 this_2(D)->source+0 S4 A32])) ..\Str\str.cpp:195 83 {*movsi_internal}
     (nil))
(insn 10 7 14 2 (set (reg:SI 0 ax [orig:88 <retval> ] [88])
        (reg/f:SI 0 ax [orig:87 D.21568 ] [87])) ..\Str\str.cpp:195 83 {*movsi_internal}
     (nil))
(insn 14 10 15 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) ..\Str\str.cpp:196 83 {*movsi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:196 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function int Str::getSize() (_ZN3Str7getSizeEv, funcdef_no=1048, decl_uid=20933, cgraph_uid=225, symbol_order=226)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0
   Insn 14: point = 0
   Insn 10: point = 1
   Insn 7: point = 3
   Insn 6: point = 5
   Insn 2: point = 6
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns


int Str::getSize()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 6[bp]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 23{10d,13u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:198 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 this+0 S4 A32])) ..\Str\str.cpp:199 83 {*movsi_internal}
     (nil))
(insn 7 6 10 2 (set (reg:SI 0 ax [orig:87 D.21569 ] [87])
        (mem/j:SI (plus:SI (reg/f:SI 0 ax [89])
                (const_int 4 [0x4])) [0 this_2(D)->size+0 S4 A32])) ..\Str\str.cpp:199 83 {*movsi_internal}
     (nil))
(insn 10 7 14 2 (set (reg:SI 0 ax [orig:88 <retval> ] [88])
        (reg:SI 0 ax [orig:87 D.21569 ] [87])) ..\Str\str.cpp:199 83 {*movsi_internal}
     (nil))
(insn 14 10 15 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) ..\Str\str.cpp:200 83 {*movsi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:SI 0 ax)) ..\Str\str.cpp:200 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function void Str::clear() (_ZN3Str5clearEv, funcdef_no=1049, decl_uid=20937, cgraph_uid=226, symbol_order=227)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 23: point = 0
   Insn 20: point = 0
   Insn 19: point = 1
   Insn 18: point = 2
   Insn 17: point = 3
  BB 3
   Insn 14: point = 4
   Insn 13: point = 4
   Insn 12: point = 5
   Insn 11: point = 7
  BB 2
   Insn 9: point = 8
   Insn 8: point = 8
   Insn 7: point = 9
   Insn 6: point = 11
   Insn 2: point = 12
Compressing live ranges: from 12 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


void Str::clear()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={8d,6u} r1={2d} r2={2d,1u} r6={1d,9u} r7={1d,7u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{87d,25u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])
        (reg:SI 2 cx [ this ])) ..\Str\str.cpp:202 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:203 83 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [orig:87 D.21570 ] [87])
        (mem/f/j:SI (reg/f:SI 0 ax [89]) [0 this_3(D)->source+0 S4 A32])) ..\Str\str.cpp:203 83 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:87 D.21570 ] [87])
            (const_int 0 [0]))) ..\Str\str.cpp:203 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) ..\Str\str.cpp:203 509 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 90
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:203 83 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 0 ax [orig:88 D.21570 ] [88])
        (mem/f/j:SI (reg/f:SI 0 ax [90]) [0 this_3(D)->source+0 S4 A32])) ..\Str\str.cpp:203 83 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.21570 ] [88])) ..\Str\str.cpp:203 83 {*movsi_internal}
     (nil))
(call_insn 14 13 15 3 (call (mem:QI (symbol_ref:SI ("_ZdaPv") [flags 0x43]  <function_decl 041e2680 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 4 [0x4])) ..\Str\str.cpp:203 556 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(code_label 15 14 16 4 97 "" [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:204 83 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (mem/f/j:SI (reg/f:SI 0 ax [91]) [0 this_3(D)->source+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:204 83 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 this+0 S4 A32])) ..\Str\str.cpp:205 83 {*movsi_internal}
     (nil))
(insn 20 19 23 4 (set (mem/j:SI (plus:SI (reg/f:SI 0 ax [92])
                (const_int 4 [0x4])) [0 this_3(D)->size+0 S4 A32])
        (const_int 0 [0])) ..\Str\str.cpp:205 83 {*movsi_internal}
     (nil))
(insn 23 20 24 4 (const_int 0 [0]) ..\Str\str.cpp:206 581 {nop}
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function void __tcf_0() (__tcf_0, funcdef_no=1051, decl_uid=21136, cgraph_uid=227, symbol_order=274)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) lBwBz {*call}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __tcf_0()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 2[cx] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 88{81d,7u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 2 cx)
        (symbol_ref:SI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 04e13840 __ioinit>)) c:\mingw\lib\gcc\mingw32\5.3.0\include\c++\iostream:74 83 {*movsi_internal}
     (nil))
(call_insn 6 5 9 2 (call (mem:QI (symbol_ref:SI ("_ZNSt8ios_base4InitD1Ev") [flags 0x43]  <function_decl 04b2df80 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) c:\mingw\lib\gcc\mingw32\5.3.0\include\c++\iostream:74 556 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 6 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1050, decl_uid=21132, cgraph_uid=228, symbol_order=275)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) lBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) lBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={3d} r2={4d,1u} r6={1d,8u} r7={1d,10u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 179{157d,22u,0e} in 9{7 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) ..\Str\str.cpp:206 7 {*cmpsi_1}
     (nil))
(jump_insn 6 5 7 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 21)
            (pc))) ..\Str\str.cpp:206 509 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) ..\Str\str.cpp:206 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 21)
            (pc))) ..\Str\str.cpp:206 509 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:SI 2 cx)
        (symbol_ref:SI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 04e13840 __ioinit>)) c:\mingw\lib\gcc\mingw32\5.3.0\include\c++\iostream:74 83 {*movsi_internal}
     (nil))
(call_insn 12 11 13 4 (call (mem:QI (symbol_ref:SI ("_ZNSt8ios_base4InitC1Ev") [flags 0x43]  <function_decl 04b2de80 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) c:\mingw\lib\gcc\mingw32\5.3.0\include\c++\iostream:74 556 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(insn 13 12 14 4 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref:SI ("__tcf_0") [flags 0x3]  <function_decl 04e5fe80 __tcf_0>)) c:\mingw\lib\gcc\mingw32\5.3.0\include\c++\iostream:74 83 {*movsi_internal}
     (nil))
(call_insn 14 13 21 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("atexit") [flags 0x43]  <function_decl 04e5ff00 atexit>) [0 atexit S1 A8])
            (const_int 4 [0x4]))) c:\mingw\lib\gcc\mingw32\5.3.0\include\c++\iostream:74 565 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 14 19 6 101 "" [2 uses])
(note 19 21 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 17 6 (const_int 0 [0]) ..\Str\str.cpp:206 581 {nop}
     (nil))
;;  succ:       5 [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100,0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 17 20 18 5 99 "" [0 uses])
(note 18 17 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 18 0 NOTE_INSN_DELETED)

;; Function (static initializers for ..\Str\str.cpp) (_GLOBAL__sub_I__Z9lowerCasei, funcdef_no=1052, decl_uid=21139, cgraph_uid=229, symbol_order=375)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) lBwBz {*call}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for ..\Str\str.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r6={1d,2u} r7={1d,7u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 90{80d,10u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (const_int 65535 [0xffff])) ..\Str\str.cpp:206 83 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 1 [0x1])) ..\Str\str.cpp:206 83 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:SI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 04e5fe00 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 8 [0x8])) ..\Str\str.cpp:206 556 {*call}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
;;  succ:       EXIT [100,0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
